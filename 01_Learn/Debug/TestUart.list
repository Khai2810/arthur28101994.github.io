
TestUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a24  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001c08  08001c08  00011c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c5c  08001c5c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08001c5c  08001c5c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c5c  08001c5c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c5c  08001c5c  00011c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c60  08001c60  00011c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08001c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000028  08001c8c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08001c8c  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d72  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001605  00000000  00000000  00024dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000570  00000000  00000000  000263c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000480  00000000  00000000  00026938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015354  00000000  00000000  00026db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000670a  00000000  00000000  0003c10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000745f8  00000000  00000000  00042816  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6e0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001278  00000000  00000000  000b6e8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000028 	.word	0x20000028
 8000200:	00000000 	.word	0x00000000
 8000204:	08001bf0 	.word	0x08001bf0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000002c 	.word	0x2000002c
 8000220:	08001bf0 	.word	0x08001bf0

08000224 <MX_GPIO_Init>:
     PA3   ------> USART2_RX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <MX_GPIO_Init+0x80>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <MX_GPIO_Init+0x80>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <MX_GPIO_Init+0x80>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0320 	and.w	r3, r3, #32
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000250:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <MX_GPIO_Init+0x80>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <MX_GPIO_Init+0x80>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <MX_GPIO_Init+0x80>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	603b      	str	r3, [r7, #0]
 8000266:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA2 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 8000268:	f44f 7301 	mov.w	r3, #516	; 0x204
 800026c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800026e:	2302      	movs	r3, #2
 8000270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000272:	2303      	movs	r3, #3
 8000274:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	4619      	mov	r1, r3
 800027c:	480a      	ldr	r0, [pc, #40]	; (80002a8 <MX_GPIO_Init+0x84>)
 800027e:	f000 ff37 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10;
 8000282:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000286:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000290:	f107 0308 	add.w	r3, r7, #8
 8000294:	4619      	mov	r1, r3
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <MX_GPIO_Init+0x84>)
 8000298:	f000 ff2a 	bl	80010f0 <HAL_GPIO_Init>

}
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010800 	.word	0x40010800

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fd8c 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f812 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f7ff ffb4 	bl	8000224 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  User_Uart_Init(&User_Uart_ConfigPtr);
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <main+0x28>)
 80002be:	f000 f903 	bl	80004c8 <User_Uart_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	 User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,recbuff,20);
 80002c2:	2214      	movs	r2, #20
 80002c4:	4904      	ldr	r1, [pc, #16]	; (80002d8 <main+0x2c>)
 80002c6:	2004      	movs	r0, #4
 80002c8:	f000 f94e 	bl	8000568 <User_Uart_AsyncTransmit>

	 HAL_Delay(1);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f000 fddf 	bl	8000e90 <HAL_Delay>
	 User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,recbuff,20);
 80002d2:	e7f6      	b.n	80002c2 <main+0x16>
 80002d4:	08001c4c 	.word	0x08001c4c
 80002d8:	20000000 	.word	0x20000000

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b090      	sub	sp, #64	; 0x40
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0318 	add.w	r3, r7, #24
 80002e6:	2228      	movs	r2, #40	; 0x28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fc78 	bl	8001be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fe:	2301      	movs	r3, #1
 8000300:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000306:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	2301      	movs	r3, #1
 800030e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	2302      	movs	r3, #2
 8000312:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000318:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f001 f84d 	bl	80013c4 <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000330:	f000 f819 	bl	8000366 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2302      	movs	r3, #2
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f001 fab8 	bl	80018c4 <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800035a:	f000 f804 	bl	8000366 <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3740      	adds	r7, #64	; 0x40
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
	...

08000374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <HAL_MspInit+0x40>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <HAL_MspInit+0x40>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6193      	str	r3, [r2, #24]
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <HAL_MspInit+0x40>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <HAL_MspInit+0x40>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	4a07      	ldr	r2, [pc, #28]	; (80003b4 <HAL_MspInit+0x40>)
 8000398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800039c:	61d3      	str	r3, [r2, #28]
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <HAL_MspInit+0x40>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000

080003b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
	  return;
 80003c8:	bf00      	nop
  }
}
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <MemManage_Handler+0x4>

080003d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003da:	e7fe      	b.n	80003da <BusFault_Handler+0x4>

080003dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <UsageFault_Handler+0x4>

080003e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr

080003fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040a:	f000 fd25 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <SystemInit+0x5c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a14      	ldr	r2, [pc, #80]	; (8000470 <SystemInit+0x5c>)
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <SystemInit+0x5c>)
 8000426:	685a      	ldr	r2, [r3, #4]
 8000428:	4911      	ldr	r1, [pc, #68]	; (8000470 <SystemInit+0x5c>)
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <SystemInit+0x60>)
 800042c:	4013      	ands	r3, r2
 800042e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <SystemInit+0x5c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <SystemInit+0x5c>)
 8000436:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800043a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800043e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <SystemInit+0x5c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <SystemInit+0x5c>)
 8000446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800044a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <SystemInit+0x5c>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	4a07      	ldr	r2, [pc, #28]	; (8000470 <SystemInit+0x5c>)
 8000452:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000456:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <SystemInit+0x5c>)
 800045a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800045e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <SystemInit+0x64>)
 8000462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000466:	609a      	str	r2, [r3, #8]
#endif 
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000
 8000474:	f8ff0000 	.word	0xf8ff0000
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800047c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800047e:	e003      	b.n	8000488 <LoopCopyDataInit>

08000480 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000480:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000482:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000484:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000486:	3104      	adds	r1, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000488:	480a      	ldr	r0, [pc, #40]	; (80004b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800048c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800048e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000490:	d3f6      	bcc.n	8000480 <CopyDataInit>
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000494:	e002      	b.n	800049c <LoopFillZerobss>

08000496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000498:	f842 3b04 	str.w	r3, [r2], #4

0800049c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800049e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004a0:	d3f9      	bcc.n	8000496 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004a2:	f7ff ffb7 	bl	8000414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004a6:	f001 fb77 	bl	8001b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004aa:	f7ff feff 	bl	80002ac <main>
  bx lr
 80004ae:	4770      	bx	lr
  ldr r3, =_sidata
 80004b0:	08001c64 	.word	0x08001c64
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004b8:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 80004bc:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 80004c0:	20000574 	.word	0x20000574

080004c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC1_2_IRQHandler>
	...

080004c8 <User_Uart_Init>:

static User_Uart_ConfigType *UartConfigPtr = NULL;
static uint8_t User_Uart_RxBuffer[USER_UART_NUMBEROFCHANNEL_USED][USER_UART_MAX_MESSAGE_LENGTH];

void User_Uart_Init(const User_Uart_ConfigType *UartConfig)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

	uint8_t u8ChannelCount = 0U;
 80004d0:	2300      	movs	r3, #0
 80004d2:	77fb      	strb	r3, [r7, #31]
	User_Uart_HWConfigType HWConfig;


	UartConfigPtr = (User_Uart_ConfigType *)UartConfig;
 80004d4:	4a23      	ldr	r2, [pc, #140]	; (8000564 <User_Uart_Init+0x9c>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6013      	str	r3, [r2, #0]

    for(u8ChannelCount = 0u; u8ChannelCount < UartConfigPtr->numberChannel; u8ChannelCount++)
 80004da:	2300      	movs	r3, #0
 80004dc:	77fb      	strb	r3, [r7, #31]
 80004de:	e037      	b.n	8000550 <User_Uart_Init+0x88>
    {
    	HWConfig.ParityMode = UartConfigPtr->ChannelConfig[u8ChannelCount].ParityMode;
 80004e0:	4b20      	ldr	r3, [pc, #128]	; (8000564 <User_Uart_Init+0x9c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	685a      	ldr	r2, [r3, #4]
 80004e6:	7ffb      	ldrb	r3, [r7, #31]
 80004e8:	011b      	lsls	r3, r3, #4
 80004ea:	4413      	add	r3, r2
 80004ec:	7b1b      	ldrb	r3, [r3, #12]
 80004ee:	763b      	strb	r3, [r7, #24]
    	HWConfig.StopBitCount = UartConfigPtr->ChannelConfig[u8ChannelCount].StopBitCount;
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <User_Uart_Init+0x9c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	685a      	ldr	r2, [r3, #4]
 80004f6:	7ffb      	ldrb	r3, [r7, #31]
 80004f8:	011b      	lsls	r3, r3, #4
 80004fa:	4413      	add	r3, r2
 80004fc:	7b5b      	ldrb	r3, [r3, #13]
 80004fe:	767b      	strb	r3, [r7, #25]
    	HWConfig.u32SourceClock = UartConfigPtr->ChannelConfig[u8ChannelCount].u32SourceClock;
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <User_Uart_Init+0x9c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	685a      	ldr	r2, [r3, #4]
 8000506:	7ffb      	ldrb	r3, [r7, #31]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	4413      	add	r3, r2
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	613b      	str	r3, [r7, #16]
    	HWConfig.u32Baudrate = UartConfigPtr->ChannelConfig[u8ChannelCount].u32Baudrate;
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <User_Uart_Init+0x9c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	7ffb      	ldrb	r3, [r7, #31]
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	4413      	add	r3, r2
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	617b      	str	r3, [r7, #20]
    	HWConfig.SlipStatus = UartConfigPtr->ChannelConfig[u8ChannelCount].SlipStatus;
 8000520:	4b10      	ldr	r3, [pc, #64]	; (8000564 <User_Uart_Init+0x9c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	685a      	ldr	r2, [r3, #4]
 8000526:	7ffb      	ldrb	r3, [r7, #31]
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	4413      	add	r3, r2
 800052c:	7b9b      	ldrb	r3, [r3, #14]
 800052e:	76bb      	strb	r3, [r7, #26]
    	HWConfig.u8HwChannelID = UartConfigPtr->ChannelConfig[u8ChannelCount].u8HwChannelID;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <User_Uart_Init+0x9c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	7ffb      	ldrb	r3, [r7, #31]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	4413      	add	r3, r2
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	733b      	strb	r3, [r7, #12]

        User_Uart_Ipw_Init(&HWConfig);
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f867 	bl	8000618 <User_Uart_Ipw_Init>
    for(u8ChannelCount = 0u; u8ChannelCount < UartConfigPtr->numberChannel; u8ChannelCount++)
 800054a:	7ffb      	ldrb	r3, [r7, #31]
 800054c:	3301      	adds	r3, #1
 800054e:	77fb      	strb	r3, [r7, #31]
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <User_Uart_Init+0x9c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	7ffa      	ldrb	r2, [r7, #31]
 8000558:	429a      	cmp	r2, r3
 800055a:	d3c1      	bcc.n	80004e0 <User_Uart_Init+0x18>
    }
}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000044 	.word	0x20000044

08000568 <User_Uart_AsyncTransmit>:


Std_ReturnType User_Uart_AsyncTransmit(uint8_t u8ChannelId, uint8_t *u8DataPtr, uint16_t u16DataLen)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	80bb      	strh	r3, [r7, #4]
    uint8_t u8count;
    uint8_t ChannelID = 0xFFu;
 8000578:	23ff      	movs	r3, #255	; 0xff
 800057a:	73bb      	strb	r3, [r7, #14]
    Std_ReturnType ret = E_NOT_OK;
 800057c:	2300      	movs	r3, #0
 800057e:	737b      	strb	r3, [r7, #13]

    if(UartConfigPtr == NULL)
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <User_Uart_AsyncTransmit+0xac>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d101      	bne.n	800058c <User_Uart_AsyncTransmit+0x24>
    {
    	return E_NOT_OK;
 8000588:	2300      	movs	r3, #0
 800058a:	e03e      	b.n	800060a <User_Uart_AsyncTransmit+0xa2>
    }

    for(u8count = 0;u8count < UartConfigPtr->numberChannel;u8count++)
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	e00f      	b.n	80005b2 <User_Uart_AsyncTransmit+0x4a>
    {
        if(UartConfigPtr->ChannelConfig[u8count].u8HwChannelID == u8ChannelId)
 8000592:	4b20      	ldr	r3, [pc, #128]	; (8000614 <User_Uart_AsyncTransmit+0xac>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	011b      	lsls	r3, r3, #4
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	79fa      	ldrb	r2, [r7, #7]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d102      	bne.n	80005ac <User_Uart_AsyncTransmit+0x44>
        {
            ChannelID = u8count;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	73bb      	strb	r3, [r7, #14]
            break;
 80005aa:	e008      	b.n	80005be <User_Uart_AsyncTransmit+0x56>
    for(u8count = 0;u8count < UartConfigPtr->numberChannel;u8count++)
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	3301      	adds	r3, #1
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <User_Uart_AsyncTransmit+0xac>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	7bfa      	ldrb	r2, [r7, #15]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d3e9      	bcc.n	8000592 <User_Uart_AsyncTransmit+0x2a>
        }
    }

    if(ChannelID == 0xFF)
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	2bff      	cmp	r3, #255	; 0xff
 80005c2:	d101      	bne.n	80005c8 <User_Uart_AsyncTransmit+0x60>
    {
        return E_NOT_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e020      	b.n	800060a <User_Uart_AsyncTransmit+0xa2>
    }

    if(UartConfigPtr->ChannelConfig[ChannelID].SlipStatus == USER_UART_SLIP_ENABLE)
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <User_Uart_AsyncTransmit+0xac>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	7bbb      	ldrb	r3, [r7, #14]
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	4413      	add	r3, r2
 80005d4:	7b9b      	ldrb	r3, [r3, #14]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d10d      	bne.n	80005f6 <User_Uart_AsyncTransmit+0x8e>
    {
    	if(u16DataLen > USER_UART_MAX_MESSAGE_LENGTH)
 80005da:	88bb      	ldrh	r3, [r7, #4]
 80005dc:	2b80      	cmp	r3, #128	; 0x80
 80005de:	d901      	bls.n	80005e4 <User_Uart_AsyncTransmit+0x7c>
    	{
    		return E_NOT_OK;
 80005e0:	2300      	movs	r3, #0
 80005e2:	e012      	b.n	800060a <User_Uart_AsyncTransmit+0xa2>
    	}
         ret = User_Slip_SendFrame(u8ChannelId,u8DataPtr,u16DataLen);
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	88ba      	ldrh	r2, [r7, #4]
 80005e8:	6839      	ldr	r1, [r7, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fb54 	bl	8000c98 <User_Slip_SendFrame>
 80005f0:	4603      	mov	r3, r0
 80005f2:	737b      	strb	r3, [r7, #13]
 80005f4:	e008      	b.n	8000608 <User_Uart_AsyncTransmit+0xa0>
    }
    else
    {
        ret = User_Uart_Ipw_AsyncTransmit(u8ChannelId,u8DataPtr,u16DataLen);
 80005f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	6839      	ldr	r1, [r7, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f823 	bl	800064a <User_Uart_Ipw_AsyncTransmit>
 8000604:	4603      	mov	r3, r0
 8000606:	737b      	strb	r3, [r7, #13]
    }

    return ret;
 8000608:	7b7b      	ldrb	r3, [r7, #13]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000044 	.word	0x20000044

08000618 <User_Uart_Ipw_Init>:

#include "User_Uart_Ipw.h"

void User_Uart_Ipw_Init (User_Uart_HWConfigType *HwConfig)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

    if ((HwConfig->u8HwChannelID >= USER_UART_CHANNEL_USART1) && (HwConfig->u8HwChannelID <= USER_UART_CHANNEL_USART6))
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d90c      	bls.n	8000642 <User_Uart_Ipw_Init+0x2a>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b09      	cmp	r3, #9
 800062e:	d808      	bhi.n	8000642 <User_Uart_Ipw_Init+0x2a>
    {
        HwConfig->u8HwChannelID = HwConfig->u8HwChannelID - USER_UART_CHANNEL_USART1;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	3b04      	subs	r3, #4
 8000636:	b2da      	uxtb	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	701a      	strb	r2, [r3, #0]
        User_Ip_Usart_Init(HwConfig);
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 f8e7 	bl	8000810 <User_Ip_Usart_Init>
    }
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <User_Uart_Ipw_AsyncTransmit>:

Std_ReturnType User_Uart_Ipw_AsyncTransmit (uint8_t u8ChannelId, const uint8_t *u8DataPtr, int16_t i16DataLen)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	6039      	str	r1, [r7, #0]
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	4613      	mov	r3, r2
 8000658:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType ret = E_NOT_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]
    uint8_t channelID = u8ChannelId;
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	73bb      	strb	r3, [r7, #14]

    if ((channelID >= USER_UART_CHANNEL_USART1) && (channelID <= USER_UART_CHANNEL_USART6))
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	2b03      	cmp	r3, #3
 8000666:	d90e      	bls.n	8000686 <User_Uart_Ipw_AsyncTransmit+0x3c>
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	2b09      	cmp	r3, #9
 800066c:	d80b      	bhi.n	8000686 <User_Uart_Ipw_AsyncTransmit+0x3c>
    {
        channelID = channelID - USER_UART_CHANNEL_USART1;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	3b04      	subs	r3, #4
 8000672:	73bb      	strb	r3, [r7, #14]
        ret = User_Ip_Usart_WriteBuffer(channelID,u8DataPtr,i16DataLen);
 8000674:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000678:	7bbb      	ldrb	r3, [r7, #14]
 800067a:	6839      	ldr	r1, [r7, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f989 	bl	8000994 <User_Ip_Usart_WriteBuffer>
 8000682:	4603      	mov	r3, r0
 8000684:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <User_Ip_Usart_SetBaudrate>:


static User_Ip_Usart_RingBuffer_t *User_Ip_Usart_GetBuffer(uint8_t u8ChannelId);

static Std_ReturnType User_Ip_Usart_SetBaudrate (User_Ip_Usart_Type * HwChannel, uint32_t UsartSourceClock, uint32_t baudrate)
{
 8000690:	b480      	push	{r7}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]

    uint16_t DIV_Mantissa = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	82fb      	strh	r3, [r7, #22]
    uint16_t DIV_Fraction = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	82bb      	strh	r3, [r7, #20]
    Std_ReturnType ret = E_NOT_OK;
 80006a4:	2300      	movs	r3, #0
 80006a6:	74fb      	strb	r3, [r7, #19]

    /* In case of oversampling by 16 */
    DIV_Mantissa = UsartSourceClock / (16 * baudrate);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b2:	82fb      	strh	r3, [r7, #22]
    DIV_Fraction = (UsartSourceClock / (baudrate)) % 16 ;
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006bc:	b29b      	uxth	r3, r3
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	82bb      	strh	r3, [r7, #20]

    HwChannel->BRR = (DIV_Mantissa << 4) & USER_IP_USART_BRR_DIV_Mantissa_MASK;
 80006c4:	8afb      	ldrh	r3, [r7, #22]
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	609a      	str	r2, [r3, #8]
    HwChannel->BRR |= DIV_Fraction & USER_IP_USART_BRR_DIV_Fraction_MASK;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	8abb      	ldrh	r3, [r7, #20]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	431a      	orrs	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	609a      	str	r2, [r3, #8]

    ret = E_OK;
 80006de:	2301      	movs	r3, #1
 80006e0:	74fb      	strb	r3, [r7, #19]
    return ret;
 80006e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	371c      	adds	r7, #28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <User_Ip_Usart_SetParityMode>:

static void User_Ip_Usart_SetParityMode(User_Ip_Usart_Type *HwChannel, User_Uart_ParityMode_t parityMode)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b085      	sub	sp, #20
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	70fb      	strb	r3, [r7, #3]
    uint8_t u8ParityMode = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]

    if (parityMode == USER_UART_PARITY_NONE)
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d106      	bne.n	8000712 <User_Ip_Usart_SetParityMode+0x24>
    {
        HwChannel->CR1 &= ~USER_IP_USART_CR1_PS_MASK;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
    {
        u8ParityMode = parityMode - 1u;
        HwChannel->CR1 |= USER_IP_USART_CR1_PS_MASK;
        HwChannel->CR1 |= u8ParityMode << USER_IP_USART_CR1_PCE_SHIFT;
    }
}
 8000710:	e00f      	b.n	8000732 <User_Ip_Usart_SetParityMode+0x44>
        u8ParityMode = parityMode - 1u;
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	3b01      	subs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
        HwChannel->CR1 |= USER_IP_USART_CR1_PS_MASK;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60da      	str	r2, [r3, #12]
        HwChannel->CR1 |= u8ParityMode << USER_IP_USART_CR1_PCE_SHIFT;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	7bfa      	ldrb	r2, [r7, #15]
 800072a:	0292      	lsls	r2, r2, #10
 800072c:	431a      	orrs	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60da      	str	r2, [r3, #12]
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <User_Ip_Usart_SetStopBitCount>:

static void User_Ip_Usart_SetStopBitCount(User_Ip_Usart_Type *HwChannel, User_Uart_StopBitCount_t stopBitCount)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
    HwChannel->CR2 &= ~USER_IP_USART_CR2_STOP_MASK;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	611a      	str	r2, [r3, #16]
    HwChannel->CR2 |= ((stopBitCount << USER_IP_USART_CR2_STOP_SHIFT) & USER_IP_USART_CR2_STOP_MASK);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	691a      	ldr	r2, [r3, #16]
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	035b      	lsls	r3, r3, #13
 800075c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8000760:	431a      	orrs	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	611a      	str	r2, [r3, #16]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <User_Ip_Usart_DeInit>:

void User_Ip_Usart_DeInit(User_Ip_Usart_Type *HwChannel)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    uint16_t u16countInstance = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	81fb      	strh	r3, [r7, #14]
    uint16_t u16countByte = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	81bb      	strh	r3, [r7, #12]
    User_Ip_Usart_RingBuffer_t * BufferChannel;

    HwChannel->CR1 = USER_IP_USART_RESET_VALUE;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
    HwChannel->CR2 = USER_IP_USART_RESET_VALUE;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
    HwChannel->CR3 = USER_IP_USART_RESET_VALUE;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
    HwChannel->BRR = USER_IP_USART_RESET_VALUE;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]

    for (u16countInstance = 0; u16countInstance < USER_IP_USART_INSTANCE_COUNT; u16countInstance++)
 8000798:	2300      	movs	r3, #0
 800079a:	81fb      	strh	r3, [r7, #14]
 800079c:	e02e      	b.n	80007fc <User_Ip_Usart_DeInit+0x8c>
    {
        BufferChannel = Buffer_Ptr_Arr[u16countInstance];
 800079e:	89fb      	ldrh	r3, [r7, #14]
 80007a0:	4a1a      	ldr	r2, [pc, #104]	; (800080c <User_Ip_Usart_DeInit+0x9c>)
 80007a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a6:	60bb      	str	r3, [r7, #8]
        BufferChannel->RxHead = 0;
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	2200      	movs	r2, #0
 80007ac:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
        BufferChannel->RxTail = 0;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2200      	movs	r2, #0
 80007b4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
        BufferChannel->TxHead = 0;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
        BufferChannel->TxTail = 0;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
        BufferChannel->Status = USART_BUFFER_UNLOCK;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

        for (u16countByte = 0; u16countByte < USER_IP_USART_SIZE_RINGBUFF; u16countByte++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	81bb      	strh	r3, [r7, #12]
 80007d4:	e00c      	b.n	80007f0 <User_Ip_Usart_DeInit+0x80>
        {
            BufferChannel->User_Ip_Usart_RingRxBufferChannel[u16countByte] = 0x00u;
 80007d6:	89bb      	ldrh	r3, [r7, #12]
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	4413      	add	r3, r2
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            BufferChannel->User_Ip_Usart_RingTxBufferChannel[u16countByte] = 0x00u;
 80007e2:	89bb      	ldrh	r3, [r7, #12]
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	2100      	movs	r1, #0
 80007e8:	54d1      	strb	r1, [r2, r3]
        for (u16countByte = 0; u16countByte < USER_IP_USART_SIZE_RINGBUFF; u16countByte++)
 80007ea:	89bb      	ldrh	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	81bb      	strh	r3, [r7, #12]
 80007f0:	89bb      	ldrh	r3, [r7, #12]
 80007f2:	2b7f      	cmp	r3, #127	; 0x7f
 80007f4:	d9ef      	bls.n	80007d6 <User_Ip_Usart_DeInit+0x66>
    for (u16countInstance = 0; u16countInstance < USER_IP_USART_INSTANCE_COUNT; u16countInstance++)
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	3301      	adds	r3, #1
 80007fa:	81fb      	strh	r3, [r7, #14]
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d9cd      	bls.n	800079e <User_Ip_Usart_DeInit+0x2e>
        }
    }
}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000010 	.word	0x20000010

08000810 <User_Ip_Usart_Init>:


void User_Ip_Usart_Init(User_Uart_HWConfigType *HwConfig)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    uint8_t u8ChannelId = HwConfig->u8HwChannelID;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	75fb      	strb	r3, [r7, #23]
    User_Ip_Usart_Type *Usart = User_Ip_Usart_BaseAddress[u8ChannelId];
 800081e:	7dfb      	ldrb	r3, [r7, #23]
 8000820:	4a30      	ldr	r2, [pc, #192]	; (80008e4 <User_Ip_Usart_Init+0xd4>)
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	613b      	str	r3, [r7, #16]
   // uint8_t u8Temp;

    __HAL_RCC_USART1_CLK_ENABLE();
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <User_Ip_Usart_Init+0xd8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a2e      	ldr	r2, [pc, #184]	; (80008e8 <User_Ip_Usart_Init+0xd8>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <User_Ip_Usart_Init+0xd8>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <User_Ip_Usart_Init+0xd8>)
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <User_Ip_Usart_Init+0xd8>)
 8000846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084a:	61d3      	str	r3, [r2, #28]
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <User_Ip_Usart_Init+0xd8>)
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]


    User_Ip_Usart_DeInit (Usart);
 8000858:	6938      	ldr	r0, [r7, #16]
 800085a:	f7ff ff89 	bl	8000770 <User_Ip_Usart_DeInit>
    Usart->CR1 &= ~USER_IP_USART_CR1_TE_MASK;
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	f023 0208 	bic.w	r2, r3, #8
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	60da      	str	r2, [r3, #12]
    Usart->CR1 &= ~USER_IP_USART_CR1_RE_MASK;
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	f023 0204 	bic.w	r2, r3, #4
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	60da      	str	r2, [r3, #12]

    User_Ip_Usart_SetBaudrate (Usart, HwConfig->u32SourceClock, HwConfig->u32Baudrate);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6859      	ldr	r1, [r3, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	461a      	mov	r2, r3
 8000880:	6938      	ldr	r0, [r7, #16]
 8000882:	f7ff ff05 	bl	8000690 <User_Ip_Usart_SetBaudrate>
    User_Ip_Usart_SetParityMode(Usart, HwConfig->ParityMode);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7b1b      	ldrb	r3, [r3, #12]
 800088a:	4619      	mov	r1, r3
 800088c:	6938      	ldr	r0, [r7, #16]
 800088e:	f7ff ff2e 	bl	80006ee <User_Ip_Usart_SetParityMode>
    User_Ip_Usart_SetStopBitCount(Usart, HwConfig->StopBitCount);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7b5b      	ldrb	r3, [r3, #13]
 8000896:	4619      	mov	r1, r3
 8000898:	6938      	ldr	r0, [r7, #16]
 800089a:	f7ff ff4f 	bl	800073c <User_Ip_Usart_SetStopBitCount>

    /* Clear RXNE flag */
   // u8Temp = Usart->DR;
    Usart->CR3 |= USER_IP_USART_CR3_EIE_MASK;
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f043 0201 	orr.w	r2, r3, #1
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	615a      	str	r2, [r3, #20]
    Usart->CR1 |= ( USER_IP_USART_CR1_RXNEIE_MASK |\
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b2:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	60d3      	str	r3, [r2, #12]
                    USER_IP_USART_CR1_TE_MASK |\
                    USER_IP_USART_CR1_RE_MASK |\
                    USER_IP_USART_CR1_UE_MASK );

    /* Enable Interrupt*/
    HAL_NVIC_SetPriority(User_Usart_IRQn[u8ChannelId], USER_IP_USART_PRIORITY, 0u);
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <User_Ip_Usart_Init+0xdc>)
 80008be:	5cd3      	ldrb	r3, [r2, r3]
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	2200      	movs	r2, #0
 80008c4:	2105      	movs	r1, #5
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fbdb 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(User_Usart_IRQn[u8ChannelId]);
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	4a07      	ldr	r2, [pc, #28]	; (80008ec <User_Ip_Usart_Init+0xdc>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fbf0 	bl	80010ba <HAL_NVIC_EnableIRQ>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	08001c54 	.word	0x08001c54
 80008e8:	40021000 	.word	0x40021000
 80008ec:	20000018 	.word	0x20000018

080008f0 <User_Ip_Usart_GetBuffer>:

static User_Ip_Usart_RingBuffer_t *User_Ip_Usart_GetBuffer (uint8_t u8ChannelId)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
    User_Ip_Usart_RingBuffer_t *BufferChannel;

    if(u8ChannelId == USER_IP_USART_CHANNELID_1)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <User_Ip_Usart_GetBuffer+0x16>
    {
        BufferChannel = &Buffer_Usart1Channel;
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <User_Ip_Usart_GetBuffer+0x40>)
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e00d      	b.n	8000922 <User_Ip_Usart_GetBuffer+0x32>
    }
    else if(u8ChannelId == USER_IP_USART_CHANNELID_2)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d102      	bne.n	8000912 <User_Ip_Usart_GetBuffer+0x22>
    {
        BufferChannel = &Buffer_Usart2Channel;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <User_Ip_Usart_GetBuffer+0x44>)
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	e007      	b.n	8000922 <User_Ip_Usart_GetBuffer+0x32>
    }
    else if(u8ChannelId == USER_IP_USART_CHANNELID_3)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b03      	cmp	r3, #3
 8000916:	d102      	bne.n	800091e <User_Ip_Usart_GetBuffer+0x2e>
    {
        BufferChannel = &Buffer_Usart3Channel;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <User_Ip_Usart_GetBuffer+0x48>)
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	e001      	b.n	8000922 <User_Ip_Usart_GetBuffer+0x32>
    }
    else
    {
        BufferChannel = NULL;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
    }

    return BufferChannel;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000048 	.word	0x20000048
 8000934:	20000154 	.word	0x20000154
 8000938:	20000260 	.word	0x20000260

0800093c <User_Ip_Usart_PutChar>:

    return E_OK;
}

static inline void User_Ip_Usart_PutChar (User_Ip_Usart_Type *Usart_channel, uint8_t u8Data)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
    Usart_channel->DR = u8Data;
 8000948:	78fa      	ldrb	r2, [r7, #3]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	605a      	str	r2, [r3, #4]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <User_Ip_Usart_StartAsyncTransmit>:

static inline void User_Ip_Usart_StartAsyncTransmit (User_Ip_Usart_Type *Usart_channel)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
    Usart_channel->CR1 |= USER_IP_USART_CR1_TXEIE_MASK;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	60da      	str	r2, [r3, #12]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <User_Ip_Usart_StopAsyncTransmit>:

static inline void User_Ip_Usart_StopAsyncTransmit (User_Ip_Usart_Type *Usart_channel)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
    Usart_channel->CR1 &= ~USER_IP_USART_CR1_TXEIE_MASK;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	60da      	str	r2, [r3, #12]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <User_Ip_Usart_WriteBuffer>:


Std_ReturnType User_Ip_Usart_WriteBuffer (uint8_t u8ChannelId, const uint8_t *u8DataPtr, int16_t u16DataLen)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType ret = E_NOT_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	75fb      	strb	r3, [r7, #23]
    uint16_t u16AvailableLen = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	82bb      	strh	r3, [r7, #20]
    uint16_t u16CountLen = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	827b      	strh	r3, [r7, #18]
    User_Ip_Usart_RingBuffer_t * BufferChannel;

    BufferChannel = User_Ip_Usart_GetBuffer (u8ChannelId);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff9c 	bl	80008f0 <User_Ip_Usart_GetBuffer>
 80009b8:	60f8      	str	r0, [r7, #12]
    if (BufferChannel == NULL)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <User_Ip_Usart_WriteBuffer+0x30>
    {
        return E_NOT_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	e06c      	b.n	8000a9e <User_Ip_Usart_WriteBuffer+0x10a>
    }

    if (u8DataPtr == NULL || u16DataLen == 0u)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <User_Ip_Usart_WriteBuffer+0x3e>
 80009ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <User_Ip_Usart_WriteBuffer+0x42>
    {
        return E_NOT_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e063      	b.n	8000a9e <User_Ip_Usart_WriteBuffer+0x10a>
    }

    if (BufferChannel->Status == USART_BUFFER_UNLOCK)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d15d      	bne.n	8000a9c <User_Ip_Usart_WriteBuffer+0x108>
    {
    	BufferChannel->Status = USART_BUFFER_LOCK;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2201      	movs	r2, #1
 80009e4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (BufferChannel->TxHead > BufferChannel->TxTail)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d90a      	bls.n	8000a12 <User_Ip_Usart_WriteBuffer+0x7e>
        {
            u16AvailableLen = BufferChannel->TxHead - BufferChannel->TxTail;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	82bb      	strh	r3, [r7, #20]
 8000a10:	e00b      	b.n	8000a2a <User_Ip_Usart_WriteBuffer+0x96>
        }
        else
        {
            u16AvailableLen = (USER_IP_USART_SIZE_RINGBUFF - BufferChannel->TxTail) + BufferChannel->TxHead;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	3380      	adds	r3, #128	; 0x80
 8000a28:	82bb      	strh	r3, [r7, #20]
        }

        if (u16AvailableLen >= u16DataLen)
 8000a2a:	8aba      	ldrh	r2, [r7, #20]
 8000a2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	db33      	blt.n	8000a9c <User_Ip_Usart_WriteBuffer+0x108>
        {
            for (u16CountLen = 0; u16CountLen < u16DataLen; u16CountLen++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	827b      	strh	r3, [r7, #18]
 8000a38:	e01e      	b.n	8000a78 <User_Ip_Usart_WriteBuffer+0xe4>
            {
                BufferChannel->User_Ip_Usart_RingTxBufferChannel[BufferChannel->TxTail] = *u8DataPtr;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	7819      	ldrb	r1, [r3, #0]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	5499      	strb	r1, [r3, r2]
                if(++ BufferChannel->TxTail >= USER_IP_USART_SIZE_RINGBUFF)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	3301      	adds	r3, #1
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f8a2 1100 	strh.w	r1, [r2, #256]	; 0x100
 8000a60:	2b7f      	cmp	r3, #127	; 0x7f
 8000a62:	d903      	bls.n	8000a6c <User_Ip_Usart_WriteBuffer+0xd8>
                {
                	BufferChannel->TxTail = 0;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
                }
                u8DataPtr ++;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	603b      	str	r3, [r7, #0]
            for (u16CountLen = 0; u16CountLen < u16DataLen; u16CountLen++)
 8000a72:	8a7b      	ldrh	r3, [r7, #18]
 8000a74:	3301      	adds	r3, #1
 8000a76:	827b      	strh	r3, [r7, #18]
 8000a78:	8a7a      	ldrh	r2, [r7, #18]
 8000a7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	dbdb      	blt.n	8000a3a <User_Ip_Usart_WriteBuffer+0xa6>
            }
            BufferChannel->Status = USART_BUFFER_UNLOCK;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
            User_Ip_Usart_StartAsyncTransmit (User_Ip_Usart_BaseAddress[u8ChannelId]);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <User_Ip_Usart_WriteBuffer+0x114>)
 8000a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff60 	bl	8000958 <User_Ip_Usart_StartAsyncTransmit>
            ret = E_OK;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	08001c54 	.word	0x08001c54

08000aac <User_Ip_Usart_TransmitBuffer>:


static inline void User_Ip_Usart_TransmitBuffer(uint8_t u8ChannelId)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
    User_Ip_Usart_RingBuffer_t *BufferChannel;
    User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelId];
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <User_Ip_Usart_TransmitBuffer+0x84>)
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	60fb      	str	r3, [r7, #12]

    BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelId);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff14 	bl	80008f0 <User_Ip_Usart_GetBuffer>
 8000ac8:	60b8      	str	r0, [r7, #8]
    if(BufferChannel == NULL)
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d02a      	beq.n	8000b26 <User_Ip_Usart_TransmitBuffer+0x7a>
    {
        return;
    }

    if(BufferChannel->TxTail != BufferChannel->TxHead)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d01c      	beq.n	8000b1e <User_Ip_Usart_TransmitBuffer+0x72>
    {
        User_Ip_Usart_PutChar (HwChannel, BufferChannel->User_Ip_Usart_RingTxBufferChannel[BufferChannel->TxHead]);
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	5c9b      	ldrb	r3, [r3, r2]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff ff20 	bl	800093c <User_Ip_Usart_PutChar>
        if(++ BufferChannel->TxHead >= USER_IP_USART_SIZE_RINGBUFF)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	3301      	adds	r3, #1
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f8a2 1102 	strh.w	r1, [r2, #258]	; 0x102
 8000b10:	2b7f      	cmp	r3, #127	; 0x7f
 8000b12:	d909      	bls.n	8000b28 <User_Ip_Usart_TransmitBuffer+0x7c>
        {
        	BufferChannel->TxHead = 0;
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8000b1c:	e004      	b.n	8000b28 <User_Ip_Usart_TransmitBuffer+0x7c>
        }
    }
    else
    {
        User_Ip_Usart_StopAsyncTransmit(HwChannel);
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff ff29 	bl	8000976 <User_Ip_Usart_StopAsyncTransmit>
 8000b24:	e000      	b.n	8000b28 <User_Ip_Usart_TransmitBuffer+0x7c>
        return;
 8000b26:	bf00      	nop
    }
}
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	08001c54 	.word	0x08001c54

08000b34 <User_Ip_Usart_GetChar>:

    return E_OK;
}

static inline uint8_t User_Ip_Usart_GetChar (User_Ip_Usart_Type * Usart_channel)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
    return (Usart_channel->DR);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	b2db      	uxtb	r3, r3
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <User_Ip_Usart_ReceiveBuffer>:

static void User_Ip_Usart_ReceiveBuffer(uint8_t u8ChannelId, uint8_t u8Data)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	71bb      	strb	r3, [r7, #6]
    User_Ip_Usart_RingBuffer_t *BufferChannel;

    BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelId);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fec6 	bl	80008f0 <User_Ip_Usart_GetBuffer>
 8000b64:	60f8      	str	r0, [r7, #12]
    if(BufferChannel == NULL)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d044      	beq.n	8000bf6 <User_Ip_Usart_ReceiveBuffer+0xaa>
    {
        return;
    }

    if(BufferChannel->RxTail != BufferChannel->RxHead - 1u)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d019      	beq.n	8000bb8 <User_Ip_Usart_ReceiveBuffer+0x6c>
    {
    	BufferChannel->User_Ip_Usart_RingRxBufferChannel[BufferChannel->RxTail] = u8Data;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4413      	add	r3, r2
 8000b92:	79ba      	ldrb	r2, [r7, #6]
 8000b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    	if(++ BufferChannel->RxTail >= USER_IP_USART_SIZE_RINGBUFF)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
 8000bac:	2b7f      	cmp	r3, #127	; 0x7f
 8000bae:	d903      	bls.n	8000bb8 <User_Ip_Usart_ReceiveBuffer+0x6c>
    	{
    		BufferChannel->RxTail = 0;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    	}
    }

    if(BufferChannel->RxTail == BufferChannel->RxHead)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d115      	bne.n	8000bf8 <User_Ip_Usart_ReceiveBuffer+0xac>
    {
        if(BufferChannel->RxHead == 0U)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d104      	bne.n	8000be2 <User_Ip_Usart_ReceiveBuffer+0x96>
        {
            BufferChannel->RxTail = USER_IP_USART_SIZE_RINGBUFF - 1U;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	227f      	movs	r2, #127	; 0x7f
 8000bdc:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8000be0:	e00a      	b.n	8000bf8 <User_Ip_Usart_ReceiveBuffer+0xac>
        }
        else
        {
        	BufferChannel->RxTail -= 1;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	3b01      	subs	r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8000bf4:	e000      	b.n	8000bf8 <User_Ip_Usart_ReceiveBuffer+0xac>
        return;
 8000bf6:	bf00      	nop
        }
    }
}
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <User_Ip_Usart_IrqHandler>:

static void User_Ip_Usart_IrqHandler(uint8_t u8ChannelId)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
    uint8_t Byte_Receive = 0u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
    User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelId];
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <User_Ip_Usart_IrqHandler+0x68>)
 8000c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c16:	60bb      	str	r3, [r7, #8]

    if((HwChannel->SR & USER_IP_USART_SR_TXE_MASK) == USER_IP_USART_SR_TXE_MASK)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <User_Ip_Usart_IrqHandler+0x2c>
    {
        User_Ip_Usart_TransmitBuffer(u8ChannelId);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff40 	bl	8000aac <User_Ip_Usart_TransmitBuffer>
    }

    if((HwChannel->SR & USER_IP_USART_SR_RXNE_MASK) == USER_IP_USART_SR_RXNE_MASK)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0320 	and.w	r3, r3, #32
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00a      	beq.n	8000c4e <User_Ip_Usart_IrqHandler+0x4e>
    {
    	Byte_Receive = User_Ip_Usart_GetChar(HwChannel);
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f7ff ff7b 	bl	8000b34 <User_Ip_Usart_GetChar>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	73fb      	strb	r3, [r7, #15]
        User_Ip_Usart_ReceiveBuffer(u8ChannelId,Byte_Receive);
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff7f 	bl	8000b4c <User_Ip_Usart_ReceiveBuffer>
    {
        /*TODO*/

    }

    if((HwChannel->SR & USER_IP_USART_SR_ORE_MASK) == USER_IP_USART_SR_ORE_MASK)
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <User_Ip_Usart_IrqHandler+0x60>
    {
        /*TODO*/

        User_Ip_Usart_GetChar(HwChannel);
 8000c5a:	68b8      	ldr	r0, [r7, #8]
 8000c5c:	f7ff ff6a 	bl	8000b34 <User_Ip_Usart_GetChar>
    }
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	08001c54 	.word	0x08001c54

08000c6c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_1);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff ffc5 	bl	8000c00 <User_Ip_Usart_IrqHandler>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_2);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff ffbe 	bl	8000c00 <User_Ip_Usart_IrqHandler>
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_3);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f7ff ffb7 	bl	8000c00 <User_Ip_Usart_IrqHandler>
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <User_Slip_SendFrame>:
        }
    }
}

Std_ReturnType User_Slip_SendFrame(uint8_t u8ChannelId, uint8_t *u8DataPtr, uint16_t u16Length)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	80bb      	strh	r3, [r7, #4]
    uint8_t u8Count;
    uint8_t u8NumberSlipBuffer = 0xFFu;
 8000ca8:	23ff      	movs	r3, #255	; 0xff
 8000caa:	75bb      	strb	r3, [r7, #22]
	uint8_t u8Val;
    uint16_t u16CountIdx;
    uint16_t u16LenCount = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	827b      	strh	r3, [r7, #18]
    Std_ReturnType ret = E_NOT_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	747b      	strb	r3, [r7, #17]

    for(u8Count = 0; u8Count < UartConfigPtr->numberChannel; u8Count++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75fb      	strb	r3, [r7, #23]
 8000cb8:	e00f      	b.n	8000cda <User_Slip_SendFrame+0x42>
    {
        if(UartConfigPtr->ChannelConfig[u8Count].u8HwChannelID == u8ChannelId)
 8000cba:	4b42      	ldr	r3, [pc, #264]	; (8000dc4 <User_Slip_SendFrame+0x12c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	011b      	lsls	r3, r3, #4
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	79fa      	ldrb	r2, [r7, #7]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d102      	bne.n	8000cd4 <User_Slip_SendFrame+0x3c>
        {
        	u8NumberSlipBuffer = u8Count;
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	75bb      	strb	r3, [r7, #22]
            break;
 8000cd2:	e008      	b.n	8000ce6 <User_Slip_SendFrame+0x4e>
    for(u8Count = 0; u8Count < UartConfigPtr->numberChannel; u8Count++)
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	75fb      	strb	r3, [r7, #23]
 8000cda:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <User_Slip_SendFrame+0x12c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	7dfa      	ldrb	r2, [r7, #23]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d3e9      	bcc.n	8000cba <User_Slip_SendFrame+0x22>
        }
    }

    if(u8NumberSlipBuffer == 0xFF)
 8000ce6:	7dbb      	ldrb	r3, [r7, #22]
 8000ce8:	2bff      	cmp	r3, #255	; 0xff
 8000cea:	d101      	bne.n	8000cf0 <User_Slip_SendFrame+0x58>
    {
        return ret;
 8000cec:	7c7b      	ldrb	r3, [r7, #17]
 8000cee:	e065      	b.n	8000dbc <User_Slip_SendFrame+0x124>
    }

    User_Slip_Buffer *TxBufPtr = &User_Slip_TxBuffer[u8NumberSlipBuffer];
 8000cf0:	7dba      	ldrb	r2, [r7, #22]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	01db      	lsls	r3, r3, #7
 8000cf6:	4413      	add	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <User_Slip_SendFrame+0x130>)
 8000cfc:	4413      	add	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]

    if (u16Length < USER_SLIP_BUFFERSIZE)
 8000d00:	88bb      	ldrh	r3, [r7, #4]
 8000d02:	2bff      	cmp	r3, #255	; 0xff
 8000d04:	d859      	bhi.n	8000dba <User_Slip_SendFrame+0x122>
    {
        u16LenCount = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	827b      	strh	r3, [r7, #18]
        TxBufPtr->u8DataPtr[u16LenCount] = USER_SLIP_END;
 8000d0a:	8a7b      	ldrh	r3, [r7, #18]
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	21c0      	movs	r1, #192	; 0xc0
 8000d10:	54d1      	strb	r1, [r2, r3]
        u16LenCount++;
 8000d12:	8a7b      	ldrh	r3, [r7, #18]
 8000d14:	3301      	adds	r3, #1
 8000d16:	827b      	strh	r3, [r7, #18]

        for (u16CountIdx = 0; u16CountIdx < u16Length; u16CountIdx++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	82bb      	strh	r3, [r7, #20]
 8000d1c:	e033      	b.n	8000d86 <User_Slip_SendFrame+0xee>
        {
            u8Val = u8DataPtr[u16CountIdx];
 8000d1e:	8abb      	ldrh	r3, [r7, #20]
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	72fb      	strb	r3, [r7, #11]
            switch (u8Val)
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8000d2c:	d002      	beq.n	8000d34 <User_Slip_SendFrame+0x9c>
 8000d2e:	2bdb      	cmp	r3, #219	; 0xdb
 8000d30:	d00f      	beq.n	8000d52 <User_Slip_SendFrame+0xba>
 8000d32:	e01d      	b.n	8000d70 <User_Slip_SendFrame+0xd8>
            {
                case USER_SLIP_END:
                    TxBufPtr->u8DataPtr[u16LenCount] = USER_SLIP_ESC;
 8000d34:	8a7b      	ldrh	r3, [r7, #18]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	21db      	movs	r1, #219	; 0xdb
 8000d3a:	54d1      	strb	r1, [r2, r3]
                    u16LenCount++;
 8000d3c:	8a7b      	ldrh	r3, [r7, #18]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	827b      	strh	r3, [r7, #18]
                    TxBufPtr->u8DataPtr[u16LenCount] = USER_SLIP_ESC_END;
 8000d42:	8a7b      	ldrh	r3, [r7, #18]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	21dc      	movs	r1, #220	; 0xdc
 8000d48:	54d1      	strb	r1, [r2, r3]
                    u16LenCount++;
 8000d4a:	8a7b      	ldrh	r3, [r7, #18]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	827b      	strh	r3, [r7, #18]
                    break;
 8000d50:	e016      	b.n	8000d80 <User_Slip_SendFrame+0xe8>
                case USER_SLIP_ESC:
                    TxBufPtr->u8DataPtr[u16LenCount] = USER_SLIP_ESC;
 8000d52:	8a7b      	ldrh	r3, [r7, #18]
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	21db      	movs	r1, #219	; 0xdb
 8000d58:	54d1      	strb	r1, [r2, r3]
                    u16LenCount++;
 8000d5a:	8a7b      	ldrh	r3, [r7, #18]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	827b      	strh	r3, [r7, #18]
                    TxBufPtr->u8DataPtr[u16LenCount] = USER_SLIP_ESC_ESC;
 8000d60:	8a7b      	ldrh	r3, [r7, #18]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	21dd      	movs	r1, #221	; 0xdd
 8000d66:	54d1      	strb	r1, [r2, r3]
                    u16LenCount++;
 8000d68:	8a7b      	ldrh	r3, [r7, #18]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	827b      	strh	r3, [r7, #18]
                    break;
 8000d6e:	e007      	b.n	8000d80 <User_Slip_SendFrame+0xe8>
                default:
                    TxBufPtr->u8DataPtr[u16LenCount] = u8Val;
 8000d70:	8a7b      	ldrh	r3, [r7, #18]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	7af9      	ldrb	r1, [r7, #11]
 8000d76:	54d1      	strb	r1, [r2, r3]
                    u16LenCount++;
 8000d78:	8a7b      	ldrh	r3, [r7, #18]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	827b      	strh	r3, [r7, #18]
                    break;
 8000d7e:	bf00      	nop
        for (u16CountIdx = 0; u16CountIdx < u16Length; u16CountIdx++)
 8000d80:	8abb      	ldrh	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	82bb      	strh	r3, [r7, #20]
 8000d86:	8aba      	ldrh	r2, [r7, #20]
 8000d88:	88bb      	ldrh	r3, [r7, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d3c7      	bcc.n	8000d1e <User_Slip_SendFrame+0x86>
            }
        }
        TxBufPtr->u8DataPtr[u16LenCount] = USER_SLIP_END;
 8000d8e:	8a7b      	ldrh	r3, [r7, #18]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	21c0      	movs	r1, #192	; 0xc0
 8000d94:	54d1      	strb	r1, [r2, r3]
        u16LenCount++;
 8000d96:	8a7b      	ldrh	r3, [r7, #18]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	827b      	strh	r3, [r7, #18]
        TxBufPtr->u16DataLen =  u16LenCount;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	8a7a      	ldrh	r2, [r7, #18]
 8000da0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100

        ret = User_Uart_Ipw_AsyncTransmit(u8ChannelId,TxBufPtr->u8DataPtr,TxBufPtr->u16DataLen);
 8000da4:	68f9      	ldr	r1, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fc4a 	bl	800064a <User_Uart_Ipw_AsyncTransmit>
 8000db6:	4603      	mov	r3, r0
 8000db8:	747b      	strb	r3, [r7, #17]
    }

    return ret;
 8000dba:	7c7b      	ldrb	r3, [r7, #17]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000001c 	.word	0x2000001c
 8000dc8:	2000036c 	.word	0x2000036c

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_Init+0x28>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_Init+0x28>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f945 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fac4 	bl	8000374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f95d 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f925 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	20000024 	.word	0x20000024
 8000e54:	20000020 	.word	0x20000020

08000e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x20>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a03      	ldr	r2, [pc, #12]	; (8000e78 <HAL_IncTick+0x20>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000024 	.word	0x20000024
 8000e78:	20000570 	.word	0x20000570

08000e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <HAL_GetTick+0x10>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000570 	.word	0x20000570

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff fff0 	bl	8000e7c <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_Delay+0x40>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffe0 	bl	8000e7c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000024 	.word	0x20000024

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <__NVIC_EnableIRQ+0x34>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff90 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff2d 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff42 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff90 	bl	8000fc4 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5f 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff35 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b08b      	sub	sp, #44	; 0x2c
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001102:	e133      	b.n	800136c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001104:	2201      	movs	r2, #1
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 8122 	bne.w	8001366 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b12      	cmp	r3, #18
 8001128:	d034      	beq.n	8001194 <HAL_GPIO_Init+0xa4>
 800112a:	2b12      	cmp	r3, #18
 800112c:	d80d      	bhi.n	800114a <HAL_GPIO_Init+0x5a>
 800112e:	2b02      	cmp	r3, #2
 8001130:	d02b      	beq.n	800118a <HAL_GPIO_Init+0x9a>
 8001132:	2b02      	cmp	r3, #2
 8001134:	d804      	bhi.n	8001140 <HAL_GPIO_Init+0x50>
 8001136:	2b00      	cmp	r3, #0
 8001138:	d031      	beq.n	800119e <HAL_GPIO_Init+0xae>
 800113a:	2b01      	cmp	r3, #1
 800113c:	d01c      	beq.n	8001178 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800113e:	e048      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001140:	2b03      	cmp	r3, #3
 8001142:	d043      	beq.n	80011cc <HAL_GPIO_Init+0xdc>
 8001144:	2b11      	cmp	r3, #17
 8001146:	d01b      	beq.n	8001180 <HAL_GPIO_Init+0x90>
          break;
 8001148:	e043      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800114a:	4a8f      	ldr	r2, [pc, #572]	; (8001388 <HAL_GPIO_Init+0x298>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d026      	beq.n	800119e <HAL_GPIO_Init+0xae>
 8001150:	4a8d      	ldr	r2, [pc, #564]	; (8001388 <HAL_GPIO_Init+0x298>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d806      	bhi.n	8001164 <HAL_GPIO_Init+0x74>
 8001156:	4a8d      	ldr	r2, [pc, #564]	; (800138c <HAL_GPIO_Init+0x29c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d020      	beq.n	800119e <HAL_GPIO_Init+0xae>
 800115c:	4a8c      	ldr	r2, [pc, #560]	; (8001390 <HAL_GPIO_Init+0x2a0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d01d      	beq.n	800119e <HAL_GPIO_Init+0xae>
          break;
 8001162:	e036      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001164:	4a8b      	ldr	r2, [pc, #556]	; (8001394 <HAL_GPIO_Init+0x2a4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d019      	beq.n	800119e <HAL_GPIO_Init+0xae>
 800116a:	4a8b      	ldr	r2, [pc, #556]	; (8001398 <HAL_GPIO_Init+0x2a8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d016      	beq.n	800119e <HAL_GPIO_Init+0xae>
 8001170:	4a8a      	ldr	r2, [pc, #552]	; (800139c <HAL_GPIO_Init+0x2ac>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0xae>
          break;
 8001176:	e02c      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	623b      	str	r3, [r7, #32]
          break;
 800117e:	e028      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	3304      	adds	r3, #4
 8001186:	623b      	str	r3, [r7, #32]
          break;
 8001188:	e023      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	3308      	adds	r3, #8
 8001190:	623b      	str	r3, [r7, #32]
          break;
 8001192:	e01e      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	330c      	adds	r3, #12
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e019      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011a6:	2304      	movs	r3, #4
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e012      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b4:	2308      	movs	r3, #8
 80011b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	611a      	str	r2, [r3, #16]
          break;
 80011be:	e008      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c0:	2308      	movs	r3, #8
 80011c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	615a      	str	r2, [r3, #20]
          break;
 80011ca:	e002      	b.n	80011d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2bff      	cmp	r3, #255	; 0xff
 80011d6:	d801      	bhi.n	80011dc <HAL_GPIO_Init+0xec>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	e001      	b.n	80011e0 <HAL_GPIO_Init+0xf0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3304      	adds	r3, #4
 80011e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2bff      	cmp	r3, #255	; 0xff
 80011e6:	d802      	bhi.n	80011ee <HAL_GPIO_Init+0xfe>
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x104>
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	3b08      	subs	r3, #8
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	210f      	movs	r1, #15
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	401a      	ands	r2, r3
 8001206:	6a39      	ldr	r1, [r7, #32]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	431a      	orrs	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80a2 	beq.w	8001366 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001222:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <HAL_GPIO_Init+0x2b0>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4a5e      	ldr	r2, [pc, #376]	; (80013a0 <HAL_GPIO_Init+0x2b0>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6193      	str	r3, [r2, #24]
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <HAL_GPIO_Init+0x2b0>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800123a:	4a5a      	ldr	r2, [pc, #360]	; (80013a4 <HAL_GPIO_Init+0x2b4>)
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4013      	ands	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a51      	ldr	r2, [pc, #324]	; (80013a8 <HAL_GPIO_Init+0x2b8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01f      	beq.n	80012a6 <HAL_GPIO_Init+0x1b6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a50      	ldr	r2, [pc, #320]	; (80013ac <HAL_GPIO_Init+0x2bc>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_GPIO_Init+0x1b2>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4f      	ldr	r2, [pc, #316]	; (80013b0 <HAL_GPIO_Init+0x2c0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x1ae>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4e      	ldr	r2, [pc, #312]	; (80013b4 <HAL_GPIO_Init+0x2c4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x1aa>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4d      	ldr	r2, [pc, #308]	; (80013b8 <HAL_GPIO_Init+0x2c8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x1a6>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4c      	ldr	r2, [pc, #304]	; (80013bc <HAL_GPIO_Init+0x2cc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x1a2>
 800128e:	2305      	movs	r3, #5
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x1b8>
 8001292:	2306      	movs	r3, #6
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x1b8>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x1b8>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x1b8>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x1b8>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x1b8>
 80012a6:	2300      	movs	r3, #0
 80012a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012b8:	493a      	ldr	r1, [pc, #232]	; (80013a4 <HAL_GPIO_Init+0x2b4>)
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d2:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	493a      	ldr	r1, [pc, #232]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
 80012de:	e006      	b.n	80012ee <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012e0:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4935      	ldr	r1, [pc, #212]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012fa:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	4930      	ldr	r1, [pc, #192]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
 8001306:	e006      	b.n	8001316 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	43db      	mvns	r3, r3
 8001310:	492b      	ldr	r1, [pc, #172]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 8001312:	4013      	ands	r3, r2
 8001314:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	4926      	ldr	r1, [pc, #152]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	608b      	str	r3, [r1, #8]
 800132e:	e006      	b.n	800133e <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	43db      	mvns	r3, r3
 8001338:	4921      	ldr	r1, [pc, #132]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 800133a:	4013      	ands	r3, r2
 800133c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	491c      	ldr	r1, [pc, #112]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	60cb      	str	r3, [r1, #12]
 8001356:	e006      	b.n	8001366 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	43db      	mvns	r3, r3
 8001360:	4917      	ldr	r1, [pc, #92]	; (80013c0 <HAL_GPIO_Init+0x2d0>)
 8001362:	4013      	ands	r3, r2
 8001364:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	3301      	adds	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	fa22 f303 	lsr.w	r3, r2, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	f47f aec4 	bne.w	8001104 <HAL_GPIO_Init+0x14>
  }
}
 800137c:	bf00      	nop
 800137e:	372c      	adds	r7, #44	; 0x2c
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	10210000 	.word	0x10210000
 800138c:	10110000 	.word	0x10110000
 8001390:	10120000 	.word	0x10120000
 8001394:	10310000 	.word	0x10310000
 8001398:	10320000 	.word	0x10320000
 800139c:	10220000 	.word	0x10220000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010000 	.word	0x40010000
 80013a8:	40010800 	.word	0x40010800
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40011400 	.word	0x40011400
 80013b8:	40011800 	.word	0x40011800
 80013bc:	40011c00 	.word	0x40011c00
 80013c0:	40010400 	.word	0x40010400

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e26c      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 8087 	beq.w	80014f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e4:	4b92      	ldr	r3, [pc, #584]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d00c      	beq.n	800140a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f0:	4b8f      	ldr	r3, [pc, #572]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d112      	bne.n	8001422 <HAL_RCC_OscConfig+0x5e>
 80013fc:	4b8c      	ldr	r3, [pc, #560]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d10b      	bne.n	8001422 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140a:	4b89      	ldr	r3, [pc, #548]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d06c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x12c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d168      	bne.n	80014f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e246      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x76>
 800142c:	4b80      	ldr	r3, [pc, #512]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a7f      	ldr	r2, [pc, #508]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	e02e      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x98>
 8001442:	4b7b      	ldr	r3, [pc, #492]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7a      	ldr	r2, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b78      	ldr	r3, [pc, #480]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a77      	ldr	r2, [pc, #476]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e01d      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0xbc>
 8001466:	4b72      	ldr	r3, [pc, #456]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a71      	ldr	r2, [pc, #452]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b6f      	ldr	r3, [pc, #444]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6e      	ldr	r2, [pc, #440]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e00b      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 8001480:	4b6b      	ldr	r3, [pc, #428]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a6a      	ldr	r2, [pc, #424]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a67      	ldr	r2, [pc, #412]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001496:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fcec 	bl	8000e7c <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fce8 	bl	8000e7c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e1fa      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0xe4>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fcd8 	bl	8000e7c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fcd4 	bl	8000e7c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e1e6      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e2:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x10c>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d063      	beq.n	80015c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fe:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00b      	beq.n	8001522 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800150a:	4b49      	ldr	r3, [pc, #292]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b08      	cmp	r3, #8
 8001514:	d11c      	bne.n	8001550 <HAL_RCC_OscConfig+0x18c>
 8001516:	4b46      	ldr	r3, [pc, #280]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d116      	bne.n	8001550 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_RCC_OscConfig+0x176>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e1ba      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4939      	ldr	r1, [pc, #228]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	e03a      	b.n	80015c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fc8d 	bl	8000e7c <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fc89 	bl	8000e7c <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e19b      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4927      	ldr	r1, [pc, #156]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fc6c 	bl	8000e7c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fc68 	bl	8000e7c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e17a      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03a      	beq.n	8001648 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d019      	beq.n	800160e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_RCC_OscConfig+0x274>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fc4c 	bl	8000e7c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fc48 	bl	8000e7c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e15a      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001606:	2001      	movs	r0, #1
 8001608:	f000 faa8 	bl	8001b5c <RCC_Delay>
 800160c:	e01c      	b.n	8001648 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_RCC_OscConfig+0x274>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fc32 	bl	8000e7c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161a:	e00f      	b.n	800163c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fc2e 	bl	8000e7c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d908      	bls.n	800163c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e140      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	42420000 	.word	0x42420000
 8001638:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163c:	4b9e      	ldr	r3, [pc, #632]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1e9      	bne.n	800161c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a6 	beq.w	80017a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165a:	4b97      	ldr	r3, [pc, #604]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10d      	bne.n	8001682 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4b94      	ldr	r3, [pc, #592]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a93      	ldr	r2, [pc, #588]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b91      	ldr	r3, [pc, #580]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167e:	2301      	movs	r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b8e      	ldr	r3, [pc, #568]	; (80018bc <HAL_RCC_OscConfig+0x4f8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d118      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168e:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <HAL_RCC_OscConfig+0x4f8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a8a      	ldr	r2, [pc, #552]	; (80018bc <HAL_RCC_OscConfig+0x4f8>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7ff fbef 	bl	8000e7c <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7ff fbeb 	bl	8000e7c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b64      	cmp	r3, #100	; 0x64
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0fd      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	4b81      	ldr	r3, [pc, #516]	; (80018bc <HAL_RCC_OscConfig+0x4f8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x312>
 80016c8:	4b7b      	ldr	r3, [pc, #492]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a7a      	ldr	r2, [pc, #488]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	e02d      	b.n	8001732 <HAL_RCC_OscConfig+0x36e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x334>
 80016de:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4a75      	ldr	r2, [pc, #468]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a72      	ldr	r2, [pc, #456]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	e01c      	b.n	8001732 <HAL_RCC_OscConfig+0x36e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d10c      	bne.n	800171a <HAL_RCC_OscConfig+0x356>
 8001700:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a6c      	ldr	r2, [pc, #432]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	4a69      	ldr	r2, [pc, #420]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6213      	str	r3, [r2, #32]
 8001718:	e00b      	b.n	8001732 <HAL_RCC_OscConfig+0x36e>
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a66      	ldr	r2, [pc, #408]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4a63      	ldr	r2, [pc, #396]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d015      	beq.n	8001766 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff fb9f 	bl	8000e7c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff fb9b 	bl	8000e7c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0ab      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ee      	beq.n	8001742 <HAL_RCC_OscConfig+0x37e>
 8001764:	e014      	b.n	8001790 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff fb89 	bl	8000e7c <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff fb85 	bl	8000e7c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	; 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e095      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ee      	bne.n	800176e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d105      	bne.n	80017a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a47      	ldr	r2, [pc, #284]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8081 	beq.w	80018ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ac:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d061      	beq.n	800187c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d146      	bne.n	800184e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b3f      	ldr	r3, [pc, #252]	; (80018c0 <HAL_RCC_OscConfig+0x4fc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb59 	bl	8000e7c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fb55 	bl	8000e7c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e067      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e0:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f4:	d108      	bne.n	8001808 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	492d      	ldr	r1, [pc, #180]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a19      	ldr	r1, [r3, #32]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	430b      	orrs	r3, r1
 800181a:	4927      	ldr	r1, [pc, #156]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_RCC_OscConfig+0x4fc>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fb29 	bl	8000e7c <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff fb25 	bl	8000e7c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e037      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x46a>
 800184c:	e02f      	b.n	80018ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_RCC_OscConfig+0x4fc>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fb12 	bl	8000e7c <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff fb0e 	bl	8000e7c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e020      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x498>
 800187a:	e018      	b.n	80018ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e013      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	429a      	cmp	r2, r3
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	42420060 	.word	0x42420060

080018c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0d0      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d910      	bls.n	8001908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 0207 	bic.w	r2, r3, #7
 80018ee:	4965      	ldr	r1, [pc, #404]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b8      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800192a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	494d      	ldr	r1, [pc, #308]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d040      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e073      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06b      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4936      	ldr	r1, [pc, #216]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b4:	f7ff fa62 	bl	8000e7c <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff fa5e 	bl	8000e7c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e053      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d210      	bcs.n	8001a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0207 	bic.w	r2, r3, #7
 80019fa:	4922      	ldr	r1, [pc, #136]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e032      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4916      	ldr	r1, [pc, #88]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a52:	f000 f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a56:	4601      	mov	r1, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	5cd3      	ldrb	r3, [r2, r3]
 8001a66:	fa21 f303 	lsr.w	r3, r1, r3
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x1cc>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1d0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f9c0 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	08001c1c 	.word	0x08001c1c
 8001a90:	2000000c 	.word	0x2000000c
 8001a94:	20000020 	.word	0x20000020

08001a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b490      	push	{r4, r7}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aa0:	1d3c      	adds	r4, r7, #4
 8001aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001aa8:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d002      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d003      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x46>
 8001ad6:	e02d      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ada:	623b      	str	r3, [r7, #32]
      break;
 8001adc:	e02d      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	0c9b      	lsrs	r3, r3, #18
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aea:	4413      	add	r3, r2
 8001aec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001af0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c5b      	lsrs	r3, r3, #17
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b16:	fb02 f203 	mul.w	r2, r2, r3
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	e004      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	623b      	str	r3, [r7, #32]
      break;
 8001b32:	e002      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b36:	623b      	str	r3, [r7, #32]
      break;
 8001b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc90      	pop	{r4, r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	08001c08 	.word	0x08001c08
 8001b4c:	08001c18 	.word	0x08001c18
 8001b50:	40021000 	.word	0x40021000
 8001b54:	007a1200 	.word	0x007a1200
 8001b58:	003d0900 	.word	0x003d0900

08001b5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <RCC_Delay+0x34>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <RCC_Delay+0x38>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a5b      	lsrs	r3, r3, #9
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b78:	bf00      	nop
  }
  while (Delay --);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	60fa      	str	r2, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f9      	bne.n	8001b78 <RCC_Delay+0x1c>
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	10624dd3 	.word	0x10624dd3

08001b98 <__libc_init_array>:
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	2500      	movs	r5, #0
 8001b9c:	4e0c      	ldr	r6, [pc, #48]	; (8001bd0 <__libc_init_array+0x38>)
 8001b9e:	4c0d      	ldr	r4, [pc, #52]	; (8001bd4 <__libc_init_array+0x3c>)
 8001ba0:	1ba4      	subs	r4, r4, r6
 8001ba2:	10a4      	asrs	r4, r4, #2
 8001ba4:	42a5      	cmp	r5, r4
 8001ba6:	d109      	bne.n	8001bbc <__libc_init_array+0x24>
 8001ba8:	f000 f822 	bl	8001bf0 <_init>
 8001bac:	2500      	movs	r5, #0
 8001bae:	4e0a      	ldr	r6, [pc, #40]	; (8001bd8 <__libc_init_array+0x40>)
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	; (8001bdc <__libc_init_array+0x44>)
 8001bb2:	1ba4      	subs	r4, r4, r6
 8001bb4:	10a4      	asrs	r4, r4, #2
 8001bb6:	42a5      	cmp	r5, r4
 8001bb8:	d105      	bne.n	8001bc6 <__libc_init_array+0x2e>
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
 8001bbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bc0:	4798      	blx	r3
 8001bc2:	3501      	adds	r5, #1
 8001bc4:	e7ee      	b.n	8001ba4 <__libc_init_array+0xc>
 8001bc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bca:	4798      	blx	r3
 8001bcc:	3501      	adds	r5, #1
 8001bce:	e7f2      	b.n	8001bb6 <__libc_init_array+0x1e>
 8001bd0:	08001c5c 	.word	0x08001c5c
 8001bd4:	08001c5c 	.word	0x08001c5c
 8001bd8:	08001c5c 	.word	0x08001c5c
 8001bdc:	08001c60 	.word	0x08001c60

08001be0 <memset>:
 8001be0:	4603      	mov	r3, r0
 8001be2:	4402      	add	r2, r0
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d100      	bne.n	8001bea <memset+0xa>
 8001be8:	4770      	bx	lr
 8001bea:	f803 1b01 	strb.w	r1, [r3], #1
 8001bee:	e7f9      	b.n	8001be4 <memset+0x4>

08001bf0 <_init>:
 8001bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf2:	bf00      	nop
 8001bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf6:	bc08      	pop	{r3}
 8001bf8:	469e      	mov	lr, r3
 8001bfa:	4770      	bx	lr

08001bfc <_fini>:
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfe:	bf00      	nop
 8001c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c02:	bc08      	pop	{r3}
 8001c04:	469e      	mov	lr, r3
 8001c06:	4770      	bx	lr

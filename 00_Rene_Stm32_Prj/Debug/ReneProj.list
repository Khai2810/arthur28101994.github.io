
ReneProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000143c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001620  08001620  00011620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001650  08001650  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001650  08001650  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001650  08001650  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001650  08001650  00011650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001654  08001654  00011654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000070  080016c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080016c8  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053a6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013f4  00000000  00000000  0002543f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004a0  00000000  00000000  00026838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003d8  00000000  00000000  00026cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015632  00000000  00000000  000270b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005593  00000000  00000000  0003c6e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076e0e  00000000  00000000  00041c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b8a83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010bc  00000000  00000000  000b8b00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08001608 	.word	0x08001608

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08001608 	.word	0x08001608

08000224 <MX_GPIO_Init>:
     PA3   ------> USART2_RX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <MX_GPIO_Init+0x80>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <MX_GPIO_Init+0x80>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <MX_GPIO_Init+0x80>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0320 	and.w	r3, r3, #32
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000250:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <MX_GPIO_Init+0x80>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <MX_GPIO_Init+0x80>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <MX_GPIO_Init+0x80>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	603b      	str	r3, [r7, #0]
 8000266:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA2 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 8000268:	f44f 7301 	mov.w	r3, #516	; 0x204
 800026c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800026e:	2302      	movs	r3, #2
 8000270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000272:	2303      	movs	r3, #3
 8000274:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	4619      	mov	r1, r3
 800027c:	480a      	ldr	r0, [pc, #40]	; (80002a8 <MX_GPIO_Init+0x84>)
 800027e:	f000 fbc9 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10;
 8000282:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000286:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000290:	f107 0308 	add.w	r3, r7, #8
 8000294:	4619      	mov	r1, r3
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <MX_GPIO_Init+0x84>)
 8000298:	f000 fbbc 	bl	8000a14 <HAL_GPIO_Init>

}
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010800 	.word	0x40010800

080002ac <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fa3f 	bl	8000734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f819 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f7ff ffb3 	bl	8000224 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  char Trans_Buff[] = "khongbiet";
 80002be:	4a09      	ldr	r2, [pc, #36]	; (80002e4 <main+0x38>)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c4:	c303      	stmia	r3!, {r0, r1}
 80002c6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */
  Uart_Init(USART1);
 80002c8:	4807      	ldr	r0, [pc, #28]	; (80002e8 <main+0x3c>)
 80002ca:	f000 f961 	bl	8000590 <Uart_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//	  Uart_Transmit(USART1, Trans_Buff, 20);
	  USART1->CR1 |= USART_CR1_TXEIE;
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <main+0x3c>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <main+0x3c>)
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	60d3      	str	r3, [r2, #12]
	  USART1->DR = 'k';
 80002da:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <main+0x3c>)
 80002dc:	226b      	movs	r2, #107	; 0x6b
 80002de:	605a      	str	r2, [r3, #4]
	  USART1->CR1 |= USART_CR1_TXEIE;
 80002e0:	e7f5      	b.n	80002ce <main+0x22>
 80002e2:	bf00      	nop
 80002e4:	08001620 	.word	0x08001620
 80002e8:	40013800 	.word	0x40013800

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 f910 	bl	8001520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030e:	2301      	movs	r3, #1
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	2301      	movs	r3, #1
 800031e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000320:	2302      	movs	r3, #2
 8000322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800032a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	f107 0318 	add.w	r3, r7, #24
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fcd7 	bl	8000ce8 <HAL_RCC_OscConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000340:	f000 f819 	bl	8000376 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	230f      	movs	r3, #15
 8000346:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	2302      	movs	r3, #2
 800034a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f000 ff42 	bl	80011e8 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036a:	f000 f804 	bl	8000376 <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3740      	adds	r7, #64	; 0x40
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
	...

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <HAL_MspInit+0x5c>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a14      	ldr	r2, [pc, #80]	; (80003e0 <HAL_MspInit+0x5c>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <HAL_MspInit+0x5c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <HAL_MspInit+0x5c>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <HAL_MspInit+0x60>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <HAL_MspInit+0x60>)
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010000 	.word	0x40010000

080003e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <HardFault_Handler+0x4>

080003fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <MemManage_Handler+0x4>

08000400 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <BusFault_Handler+0x4>

08000406 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <UsageFault_Handler+0x4>

0800040c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000434:	f000 f9c4 	bl	80007c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <_sbrk+0x50>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d102      	bne.n	8000452 <_sbrk+0x16>
		heap_end = &end;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <_sbrk+0x50>)
 800044e:	4a10      	ldr	r2, [pc, #64]	; (8000490 <_sbrk+0x54>)
 8000450:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <_sbrk+0x50>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <_sbrk+0x50>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4413      	add	r3, r2
 8000460:	466a      	mov	r2, sp
 8000462:	4293      	cmp	r3, r2
 8000464:	d907      	bls.n	8000476 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000466:	f001 f829 	bl	80014bc <__errno>
 800046a:	4602      	mov	r2, r0
 800046c:	230c      	movs	r3, #12
 800046e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000470:	f04f 33ff 	mov.w	r3, #4294967295
 8000474:	e006      	b.n	8000484 <_sbrk+0x48>
	}

	heap_end += incr;
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <_sbrk+0x50>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	4a03      	ldr	r2, [pc, #12]	; (800048c <_sbrk+0x50>)
 8000480:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000482:	68fb      	ldr	r3, [r7, #12]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000008c 	.word	0x2000008c
 8000490:	200000a8 	.word	0x200000a8

08000494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <SystemInit+0x5c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <SystemInit+0x5c>)
 800049e:	f043 0301 	orr.w	r3, r3, #1
 80004a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <SystemInit+0x5c>)
 80004a6:	685a      	ldr	r2, [r3, #4]
 80004a8:	4911      	ldr	r1, [pc, #68]	; (80004f0 <SystemInit+0x5c>)
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <SystemInit+0x60>)
 80004ac:	4013      	ands	r3, r2
 80004ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <SystemInit+0x5c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <SystemInit+0x5c>)
 80004b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <SystemInit+0x5c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <SystemInit+0x5c>)
 80004c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <SystemInit+0x5c>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	4a07      	ldr	r2, [pc, #28]	; (80004f0 <SystemInit+0x5c>)
 80004d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <SystemInit+0x5c>)
 80004da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <SystemInit+0x64>)
 80004e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	40021000 	.word	0x40021000
 80004f4:	f8ff0000 	.word	0xf8ff0000
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <Reset_Handler>:
 80004fc:	2100      	movs	r1, #0
 80004fe:	e003      	b.n	8000508 <LoopCopyDataInit>

08000500 <CopyDataInit>:
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <LoopFillZerobss+0x14>)
 8000502:	585b      	ldr	r3, [r3, r1]
 8000504:	5043      	str	r3, [r0, r1]
 8000506:	3104      	adds	r1, #4

08000508 <LoopCopyDataInit>:
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <LoopFillZerobss+0x18>)
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <LoopFillZerobss+0x1c>)
 800050c:	1842      	adds	r2, r0, r1
 800050e:	429a      	cmp	r2, r3
 8000510:	d3f6      	bcc.n	8000500 <CopyDataInit>
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <LoopFillZerobss+0x20>)
 8000514:	e002      	b.n	800051c <LoopFillZerobss>

08000516 <FillZerobss>:
 8000516:	2300      	movs	r3, #0
 8000518:	f842 3b04 	str.w	r3, [r2], #4

0800051c <LoopFillZerobss>:
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <LoopFillZerobss+0x24>)
 800051e:	429a      	cmp	r2, r3
 8000520:	d3f9      	bcc.n	8000516 <FillZerobss>
 8000522:	f7ff ffb7 	bl	8000494 <SystemInit>
 8000526:	f000 ffcf 	bl	80014c8 <__libc_init_array>
 800052a:	f7ff febf 	bl	80002ac <main>
 800052e:	4770      	bx	lr
 8000530:	08001658 	.word	0x08001658
 8000534:	20000000 	.word	0x20000000
 8000538:	20000070 	.word	0x20000070
 800053c:	20000070 	.word	0x20000070
 8000540:	200000a8 	.word	0x200000a8

08000544 <ADC1_2_IRQHandler>:
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>
	...

08000548 <Uart_SetBaudrate>:
		Channel->CR1 |= USART_CR1_TXEIE;
	}
}

void Uart_SetBaudrate(Gst_UartRegType *Channel, uint32_t baudrate)
{
 8000548:	b480      	push	{r7}
 800054a:	b087      	sub	sp, #28
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
	  /*Calculate Baudrate */
	  /* USARTDIV = DIV_Mantissa + (DIV_Fraction / 16) */
	  /* Tx/ Rx baud =
	  legend: fCK - Input clock to the peripheral (PCLK1 for USART2, 3, 4, 5 or PCLK2 for USART1)
	  fCK/(16*USARTDIV) */
	  uint32_t FCK = 72000000;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <Uart_SetBaudrate+0x44>)
 8000554:	617b      	str	r3, [r7, #20]
	  //~ DIV_Mantissa = FCK / (Baudrate * 16);
	  //~ DIV_Fraction = (FCK / Baudrate) % 16;
	  //~ USART1->BRR = (DIV_Mantissa << 4) & USART_BRR_DIV_Mantissa_MASK;
	  //~ USART1->BRR |= DIV_Fraction & USART_BRR_DIV_Fraction_MASK;
	
	DIV_Mantissa = FCK / (baudrate * 16);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	697a      	ldr	r2, [r7, #20]
 800055c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000560:	613b      	str	r3, [r7, #16]
	DIV_Fraction = (FCK / baudrate) % 16;
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	fbb2 f3f3 	udiv	r3, r2, r3
 800056a:	f003 030f 	and.w	r3, r3, #15
 800056e:	60fb      	str	r3, [r7, #12]
	Channel->BRR = ((DIV_Mantissa << 4) & USART_BRR_DIV_Mantissa_MASK) |
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	b29a      	uxth	r2, r3
					(DIV_Fraction & USART_BRR_DIV_Fraction_MASK);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f003 030f 	and.w	r3, r3, #15
	Channel->BRR = ((DIV_Mantissa << 4) & USART_BRR_DIV_Mantissa_MASK) |
 800057c:	431a      	orrs	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	609a      	str	r2, [r3, #8]
}
 8000582:	bf00      	nop
 8000584:	371c      	adds	r7, #28
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	044aa200 	.word	0x044aa200

08000590 <Uart_Init>:

void Uart_Init(Gst_UartRegType *Channel)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	__HAL_RCC_USART1_CLK_ENABLE();
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <Uart_Init+0x7c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <Uart_Init+0x7c>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <Uart_Init+0x7c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_USART2_CLK_ENABLE();
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <Uart_Init+0x7c>)
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	4a15      	ldr	r2, [pc, #84]	; (800060c <Uart_Init+0x7c>)
 80005b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ba:	61d3      	str	r3, [r2, #28]
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <Uart_Init+0x7c>)
 80005be:	69db      	ldr	r3, [r3, #28]
 80005c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
	
	/* Setting baudrate */
	Uart_SetBaudrate(Channel, 9600);
 80005c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ffbb 	bl	8000548 <Uart_SetBaudrate>

	/* Enable TX/RX */
	Channel->CR1 = USART_CR1_UE | USART_CR1_TE ;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f242 0208 	movw	r2, #8200	; 0x2008
 80005d8:	60da      	str	r2, [r3, #12]

	/* Init Tx/Rx buffer */
	tx_queue_buffer = queueCreate(128);
 80005da:	2080      	movs	r0, #128	; 0x80
 80005dc:	f000 f83e 	bl	800065c <queueCreate>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <Uart_Init+0x80>)
 80005e4:	601a      	str	r2, [r3, #0]
	rx_queue_buffer = queueCreate(128);
 80005e6:	2080      	movs	r0, #128	; 0x80
 80005e8:	f000 f838 	bl	800065c <queueCreate>
 80005ec:	4602      	mov	r2, r0
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <Uart_Init+0x84>)
 80005f0:	601a      	str	r2, [r3, #0]
	/* Enable Interrupt*/
	HAL_NVIC_SetPriority(USART1_IRQn, 5, 0u);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2105      	movs	r1, #5
 80005f6:	2025      	movs	r0, #37	; 0x25
 80005f8:	f000 f9d5 	bl	80009a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005fc:	2025      	movs	r0, #37	; 0x25
 80005fe:	f000 f9ee 	bl	80009de <HAL_NVIC_EnableIRQ>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	20000098 	.word	0x20000098
 8000614:	2000009c 	.word	0x2000009c

08000618 <USART1_IRQHandler>:
	while (len --)
		Uart_PutChar(Channel, *(u8DataPtr++));
}

void USART1_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	//~ }

	uint8_t byte;
	Gst_UartRegType *UART1;
	/* Disable Tx interrupt */
	UART1->CR1 &= ~USART_CR1_TXEIE;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	60da      	str	r2, [r3, #12]

	/* TXE bit as 1 */
	if ((UART1->SR >> 7))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	09db      	lsrs	r3, r3, #7
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00d      	beq.n	8000650 <USART1_IRQHandler+0x38>
		/* Write data to DR register if data is popped from Queue successfully */
		if (deQueue(tx_queue_buffer, &byte))
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <USART1_IRQHandler+0x40>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	1cfa      	adds	r2, r7, #3
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f84c 	bl	80006da <deQueue>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <USART1_IRQHandler+0x38>
			UART1->DR = byte;
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	605a      	str	r2, [r3, #4]
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000098 	.word	0x20000098

0800065c <queueCreate>:
#include "Queue.h"

queue_buffer_t *queueCreate ( int size )
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    queue_buffer_t *queue = ( queue_buffer_t * ) malloc ( sizeof(queue_buffer_t) );
 8000664:	2014      	movs	r0, #20
 8000666:	f000 ff53 	bl	8001510 <malloc>
 800066a:	4603      	mov	r3, r0
 800066c:	60fb      	str	r3, [r7, #12]
    if ( !queue )
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <queueCreate+0x1c>
        return NULL;
 8000674:	2300      	movs	r3, #0
 8000676:	e01a      	b.n	80006ae <queueCreate+0x52>

    queue->buffer = ( char * ) malloc ( size * sizeof(char) );
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 ff48 	bl	8001510 <malloc>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	611a      	str	r2, [r3, #16]
    if ( !queue->buffer )
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <queueCreate+0x38>
        return NULL;
 8000690:	2300      	movs	r3, #0
 8000692:	e00c      	b.n	80006ae <queueCreate+0x52>

    queue->front = 0;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
    queue->rear = 0;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
    queue->size = size;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	609a      	str	r2, [r3, #8]
    queue->count = size;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	60da      	str	r2, [r3, #12]

    return queue;
 80006ac:	68fb      	ldr	r3, [r7, #12]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <isQueueEmpty>:
    free ( queue->buffer );
    free ( queue );
}

bool_t isQueueEmpty ( queue_buffer_t *queue )
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
    if ( queue->count == queue->size )
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68da      	ldr	r2, [r3, #12]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d101      	bne.n	80006ce <isQueueEmpty+0x18>
        return True;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e000      	b.n	80006d0 <isQueueEmpty+0x1a>

    return False;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <deQueue>:
    }
    return Success;
}

int deQueue ( queue_buffer_t *queue, char *data )
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
    if ( isQueueEmpty( queue ) )
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ffe6 	bl	80006b6 <isQueueEmpty>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <deQueue+0x1a>
        return Failed;
 80006f0:	2300      	movs	r3, #0
 80006f2:	e01b      	b.n	800072c <deQueue+0x52>
    else {
        *data = queue->buffer[queue->front];
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	691b      	ldr	r3, [r3, #16]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	6812      	ldr	r2, [r2, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	701a      	strb	r2, [r3, #0]
        queue->front++;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	601a      	str	r2, [r3, #0]
        queue->count++;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	60da      	str	r2, [r3, #12]
        if ( queue->front == queue->size )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	429a      	cmp	r2, r3
 8000722:	d102      	bne.n	800072a <deQueue+0x50>
            queue->front = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
    }
    return Success;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_Init+0x28>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <HAL_Init+0x28>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000744:	2003      	movs	r0, #3
 8000746:	f000 f923 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074a:	2000      	movs	r0, #0
 800074c:	f000 f808 	bl	8000760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000750:	f7ff fe18 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40022000 	.word	0x40022000

08000760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_InitTick+0x54>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_InitTick+0x58>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	fbb3 f3f1 	udiv	r3, r3, r1
 800077a:	fbb2 f3f3 	udiv	r3, r2, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f93b 	bl	80009fa <HAL_SYSTICK_Config>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e00e      	b.n	80007ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d80a      	bhi.n	80007aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000794:	2200      	movs	r2, #0
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f000 f903 	bl	80009a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_InitTick+0x5c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e000      	b.n	80007ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000008 	.word	0x20000008
 80007bc:	20000004 	.word	0x20000004

080007c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_IncTick+0x1c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x20>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a03      	ldr	r2, [pc, #12]	; (80007e0 <HAL_IncTick+0x20>)
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	20000008 	.word	0x20000008
 80007e0:	200000a0 	.word	0x200000a0

080007e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <HAL_GetTick+0x10>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	200000a0 	.word	0x200000a0

080007f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	60d3      	str	r3, [r2, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <__NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	db0b      	blt.n	8000886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 021f 	and.w	r2, r3, #31
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <__NVIC_EnableIRQ+0x34>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	2001      	movs	r0, #1
 800087e:	fa00 f202 	lsl.w	r2, r0, r2
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100

08000894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db0a      	blt.n	80008be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	490c      	ldr	r1, [pc, #48]	; (80008e0 <__NVIC_SetPriority+0x4c>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008bc:	e00a      	b.n	80008d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4908      	ldr	r1, [pc, #32]	; (80008e4 <__NVIC_SetPriority+0x50>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	3b04      	subs	r3, #4
 80008cc:	0112      	lsls	r2, r2, #4
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	440b      	add	r3, r1
 80008d2:	761a      	strb	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2b04      	cmp	r3, #4
 8000904:	bf28      	it	cs
 8000906:	2304      	movcs	r3, #4
 8000908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3304      	adds	r3, #4
 800090e:	2b06      	cmp	r3, #6
 8000910:	d902      	bls.n	8000918 <NVIC_EncodePriority+0x30>
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3b03      	subs	r3, #3
 8000916:	e000      	b.n	800091a <NVIC_EncodePriority+0x32>
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43da      	mvns	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	401a      	ands	r2, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000930:	f04f 31ff 	mov.w	r1, #4294967295
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	43d9      	mvns	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	4313      	orrs	r3, r2
         );
}
 8000942:	4618      	mov	r0, r3
 8000944:	3724      	adds	r7, #36	; 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f7ff ff90 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff2d 	bl	80007f8 <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff42 	bl	8000840 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff90 	bl	80008e8 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5f 	bl	8000894 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff35 	bl	800085c <__NVIC_EnableIRQ>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffa2 	bl	800094c <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b08b      	sub	sp, #44	; 0x2c
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a26:	e133      	b.n	8000c90 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	f040 8122 	bne.w	8000c8a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	2b12      	cmp	r3, #18
 8000a4c:	d034      	beq.n	8000ab8 <HAL_GPIO_Init+0xa4>
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d80d      	bhi.n	8000a6e <HAL_GPIO_Init+0x5a>
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d02b      	beq.n	8000aae <HAL_GPIO_Init+0x9a>
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d804      	bhi.n	8000a64 <HAL_GPIO_Init+0x50>
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d031      	beq.n	8000ac2 <HAL_GPIO_Init+0xae>
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d01c      	beq.n	8000a9c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a62:	e048      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d043      	beq.n	8000af0 <HAL_GPIO_Init+0xdc>
 8000a68:	2b11      	cmp	r3, #17
 8000a6a:	d01b      	beq.n	8000aa4 <HAL_GPIO_Init+0x90>
          break;
 8000a6c:	e043      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a6e:	4a8f      	ldr	r2, [pc, #572]	; (8000cac <HAL_GPIO_Init+0x298>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d026      	beq.n	8000ac2 <HAL_GPIO_Init+0xae>
 8000a74:	4a8d      	ldr	r2, [pc, #564]	; (8000cac <HAL_GPIO_Init+0x298>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d806      	bhi.n	8000a88 <HAL_GPIO_Init+0x74>
 8000a7a:	4a8d      	ldr	r2, [pc, #564]	; (8000cb0 <HAL_GPIO_Init+0x29c>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d020      	beq.n	8000ac2 <HAL_GPIO_Init+0xae>
 8000a80:	4a8c      	ldr	r2, [pc, #560]	; (8000cb4 <HAL_GPIO_Init+0x2a0>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d01d      	beq.n	8000ac2 <HAL_GPIO_Init+0xae>
          break;
 8000a86:	e036      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a88:	4a8b      	ldr	r2, [pc, #556]	; (8000cb8 <HAL_GPIO_Init+0x2a4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d019      	beq.n	8000ac2 <HAL_GPIO_Init+0xae>
 8000a8e:	4a8b      	ldr	r2, [pc, #556]	; (8000cbc <HAL_GPIO_Init+0x2a8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d016      	beq.n	8000ac2 <HAL_GPIO_Init+0xae>
 8000a94:	4a8a      	ldr	r2, [pc, #552]	; (8000cc0 <HAL_GPIO_Init+0x2ac>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d013      	beq.n	8000ac2 <HAL_GPIO_Init+0xae>
          break;
 8000a9a:	e02c      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	623b      	str	r3, [r7, #32]
          break;
 8000aa2:	e028      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	623b      	str	r3, [r7, #32]
          break;
 8000aac:	e023      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	623b      	str	r3, [r7, #32]
          break;
 8000ab6:	e01e      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	330c      	adds	r3, #12
 8000abe:	623b      	str	r3, [r7, #32]
          break;
 8000ac0:	e019      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d102      	bne.n	8000ad0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aca:	2304      	movs	r3, #4
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e012      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	611a      	str	r2, [r3, #16]
          break;
 8000ae2:	e008      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	615a      	str	r2, [r3, #20]
          break;
 8000aee:	e002      	b.n	8000af6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
          break;
 8000af4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	2bff      	cmp	r3, #255	; 0xff
 8000afa:	d801      	bhi.n	8000b00 <HAL_GPIO_Init+0xec>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	e001      	b.n	8000b04 <HAL_GPIO_Init+0xf0>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3304      	adds	r3, #4
 8000b04:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	2bff      	cmp	r3, #255	; 0xff
 8000b0a:	d802      	bhi.n	8000b12 <HAL_GPIO_Init+0xfe>
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	e002      	b.n	8000b18 <HAL_GPIO_Init+0x104>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	3b08      	subs	r3, #8
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	210f      	movs	r1, #15
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	401a      	ands	r2, r3
 8000b2a:	6a39      	ldr	r1, [r7, #32]
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	431a      	orrs	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f000 80a2 	beq.w	8000c8a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b46:	4b5f      	ldr	r3, [pc, #380]	; (8000cc4 <HAL_GPIO_Init+0x2b0>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4a5e      	ldr	r2, [pc, #376]	; (8000cc4 <HAL_GPIO_Init+0x2b0>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6193      	str	r3, [r2, #24]
 8000b52:	4b5c      	ldr	r3, [pc, #368]	; (8000cc4 <HAL_GPIO_Init+0x2b0>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b5e:	4a5a      	ldr	r2, [pc, #360]	; (8000cc8 <HAL_GPIO_Init+0x2b4>)
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	220f      	movs	r2, #15
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a51      	ldr	r2, [pc, #324]	; (8000ccc <HAL_GPIO_Init+0x2b8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d01f      	beq.n	8000bca <HAL_GPIO_Init+0x1b6>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a50      	ldr	r2, [pc, #320]	; (8000cd0 <HAL_GPIO_Init+0x2bc>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d019      	beq.n	8000bc6 <HAL_GPIO_Init+0x1b2>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a4f      	ldr	r2, [pc, #316]	; (8000cd4 <HAL_GPIO_Init+0x2c0>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d013      	beq.n	8000bc2 <HAL_GPIO_Init+0x1ae>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a4e      	ldr	r2, [pc, #312]	; (8000cd8 <HAL_GPIO_Init+0x2c4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d00d      	beq.n	8000bbe <HAL_GPIO_Init+0x1aa>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a4d      	ldr	r2, [pc, #308]	; (8000cdc <HAL_GPIO_Init+0x2c8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d007      	beq.n	8000bba <HAL_GPIO_Init+0x1a6>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a4c      	ldr	r2, [pc, #304]	; (8000ce0 <HAL_GPIO_Init+0x2cc>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_GPIO_Init+0x1a2>
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	e00a      	b.n	8000bcc <HAL_GPIO_Init+0x1b8>
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	e008      	b.n	8000bcc <HAL_GPIO_Init+0x1b8>
 8000bba:	2304      	movs	r3, #4
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x1b8>
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e004      	b.n	8000bcc <HAL_GPIO_Init+0x1b8>
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	e002      	b.n	8000bcc <HAL_GPIO_Init+0x1b8>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e000      	b.n	8000bcc <HAL_GPIO_Init+0x1b8>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bce:	f002 0203 	and.w	r2, r2, #3
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	4093      	lsls	r3, r2
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bdc:	493a      	ldr	r1, [pc, #232]	; (8000cc8 <HAL_GPIO_Init+0x2b4>)
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	3302      	adds	r3, #2
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d006      	beq.n	8000c04 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	493a      	ldr	r1, [pc, #232]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	600b      	str	r3, [r1, #0]
 8000c02:	e006      	b.n	8000c12 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c04:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	4935      	ldr	r1, [pc, #212]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c0e:	4013      	ands	r3, r2
 8000c10:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	4930      	ldr	r1, [pc, #192]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	604b      	str	r3, [r1, #4]
 8000c2a:	e006      	b.n	8000c3a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	492b      	ldr	r1, [pc, #172]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	4926      	ldr	r1, [pc, #152]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	608b      	str	r3, [r1, #8]
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	4921      	ldr	r1, [pc, #132]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d006      	beq.n	8000c7c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	491c      	ldr	r1, [pc, #112]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	60cb      	str	r3, [r1, #12]
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	4917      	ldr	r1, [pc, #92]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f47f aec4 	bne.w	8000a28 <HAL_GPIO_Init+0x14>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	372c      	adds	r7, #44	; 0x2c
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	10210000 	.word	0x10210000
 8000cb0:	10110000 	.word	0x10110000
 8000cb4:	10120000 	.word	0x10120000
 8000cb8:	10310000 	.word	0x10310000
 8000cbc:	10320000 	.word	0x10320000
 8000cc0:	10220000 	.word	0x10220000
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40011400 	.word	0x40011400
 8000cdc:	40011800 	.word	0x40011800
 8000ce0:	40011c00 	.word	0x40011c00
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e26c      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 8087 	beq.w	8000e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d08:	4b92      	ldr	r3, [pc, #584]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d00c      	beq.n	8000d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d14:	4b8f      	ldr	r3, [pc, #572]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d112      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
 8000d20:	4b8c      	ldr	r3, [pc, #560]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2c:	d10b      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2e:	4b89      	ldr	r3, [pc, #548]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d06c      	beq.n	8000e14 <HAL_RCC_OscConfig+0x12c>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d168      	bne.n	8000e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e246      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d4e:	d106      	bne.n	8000d5e <HAL_RCC_OscConfig+0x76>
 8000d50:	4b80      	ldr	r3, [pc, #512]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a7f      	ldr	r2, [pc, #508]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	e02e      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0x98>
 8000d66:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a7a      	ldr	r2, [pc, #488]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a77      	ldr	r2, [pc, #476]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e01d      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0xbc>
 8000d8a:	4b72      	ldr	r3, [pc, #456]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a71      	ldr	r2, [pc, #452]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b6f      	ldr	r3, [pc, #444]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a6e      	ldr	r2, [pc, #440]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e00b      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000da4:	4b6b      	ldr	r3, [pc, #428]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a6a      	ldr	r2, [pc, #424]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a67      	ldr	r2, [pc, #412]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d013      	beq.n	8000dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fd0e 	bl	80007e4 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fd0a 	bl	80007e4 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e1fa      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0xe4>
 8000dea:	e014      	b.n	8000e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fcfa 	bl	80007e4 <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fcf6 	bl	80007e4 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e1e6      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e06:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f0      	bne.n	8000df4 <HAL_RCC_OscConfig+0x10c>
 8000e12:	e000      	b.n	8000e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d063      	beq.n	8000eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e22:	4b4c      	ldr	r3, [pc, #304]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00b      	beq.n	8000e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e2e:	4b49      	ldr	r3, [pc, #292]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d11c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x18c>
 8000e3a:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d116      	bne.n	8000e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <HAL_RCC_OscConfig+0x176>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d001      	beq.n	8000e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e1ba      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	4939      	ldr	r1, [pc, #228]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e72:	e03a      	b.n	8000eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d020      	beq.n	8000ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fcaf 	bl	80007e4 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fcab 	bl	80007e4 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e19b      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4927      	ldr	r1, [pc, #156]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
 8000ebc:	e015      	b.n	8000eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fc8e 	bl	80007e4 <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fc8a 	bl	80007e4 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e17a      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d03a      	beq.n	8000f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d019      	beq.n	8000f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fc6e 	bl	80007e4 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fc6a 	bl	80007e4 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e15a      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 faa8 	bl	8001480 <RCC_Delay>
 8000f30:	e01c      	b.n	8000f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f38:	f7ff fc54 	bl	80007e4 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3e:	e00f      	b.n	8000f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f40:	f7ff fc50 	bl	80007e4 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d908      	bls.n	8000f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e140      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	42420000 	.word	0x42420000
 8000f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f60:	4b9e      	ldr	r3, [pc, #632]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e9      	bne.n	8000f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a6 	beq.w	80010c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7e:	4b97      	ldr	r3, [pc, #604]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10d      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b94      	ldr	r3, [pc, #592]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a93      	ldr	r2, [pc, #588]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b91      	ldr	r3, [pc, #580]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	4b8e      	ldr	r3, [pc, #568]	; (80011e0 <HAL_RCC_OscConfig+0x4f8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d118      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb2:	4b8b      	ldr	r3, [pc, #556]	; (80011e0 <HAL_RCC_OscConfig+0x4f8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a8a      	ldr	r2, [pc, #552]	; (80011e0 <HAL_RCC_OscConfig+0x4f8>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fc11 	bl	80007e4 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc6:	f7ff fc0d 	bl	80007e4 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e0fd      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	4b81      	ldr	r3, [pc, #516]	; (80011e0 <HAL_RCC_OscConfig+0x4f8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x312>
 8000fec:	4b7b      	ldr	r3, [pc, #492]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a7a      	ldr	r2, [pc, #488]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6213      	str	r3, [r2, #32]
 8000ff8:	e02d      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x334>
 8001002:	4b76      	ldr	r3, [pc, #472]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a75      	ldr	r2, [pc, #468]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	4b73      	ldr	r3, [pc, #460]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a72      	ldr	r2, [pc, #456]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	e01c      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b05      	cmp	r3, #5
 8001022:	d10c      	bne.n	800103e <HAL_RCC_OscConfig+0x356>
 8001024:	4b6d      	ldr	r3, [pc, #436]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4a6c      	ldr	r2, [pc, #432]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6213      	str	r3, [r2, #32]
 8001030:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a69      	ldr	r2, [pc, #420]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	e00b      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 800103e:	4b67      	ldr	r3, [pc, #412]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a66      	ldr	r2, [pc, #408]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	4b64      	ldr	r3, [pc, #400]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a63      	ldr	r2, [pc, #396]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001050:	f023 0304 	bic.w	r3, r3, #4
 8001054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d015      	beq.n	800108a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105e:	f7ff fbc1 	bl	80007e4 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	e00a      	b.n	800107c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001066:	f7ff fbbd 	bl	80007e4 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	f241 3288 	movw	r2, #5000	; 0x1388
 8001074:	4293      	cmp	r3, r2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e0ab      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	4b57      	ldr	r3, [pc, #348]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0ee      	beq.n	8001066 <HAL_RCC_OscConfig+0x37e>
 8001088:	e014      	b.n	80010b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fbab 	bl	80007e4 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff fba7 	bl	80007e4 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e095      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a8:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1ee      	bne.n	8001092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d105      	bne.n	80010c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ba:	4b48      	ldr	r3, [pc, #288]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a47      	ldr	r2, [pc, #284]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8081 	beq.w	80011d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d0:	4b42      	ldr	r3, [pc, #264]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d061      	beq.n	80011a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d146      	bne.n	8001172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e4:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <HAL_RCC_OscConfig+0x4fc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fb7b 	bl	80007e4 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fb77 	bl	80007e4 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e067      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001104:	4b35      	ldr	r3, [pc, #212]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f0      	bne.n	80010f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d108      	bne.n	800112c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	492d      	ldr	r1, [pc, #180]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a19      	ldr	r1, [r3, #32]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	430b      	orrs	r3, r1
 800113e:	4927      	ldr	r1, [pc, #156]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <HAL_RCC_OscConfig+0x4fc>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fb4b 	bl	80007e4 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001152:	f7ff fb47 	bl	80007e4 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e037      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x46a>
 8001170:	e02f      	b.n	80011d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <HAL_RCC_OscConfig+0x4fc>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fb34 	bl	80007e4 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001180:	f7ff fb30 	bl	80007e4 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e020      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x498>
 800119e:	e018      	b.n	80011d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40007000 	.word	0x40007000
 80011e4:	42420060 	.word	0x42420060

080011e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0d0      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011fc:	4b6a      	ldr	r3, [pc, #424]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d910      	bls.n	800122c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120a:	4b67      	ldr	r3, [pc, #412]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 0207 	bic.w	r2, r3, #7
 8001212:	4965      	ldr	r1, [pc, #404]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121a:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0b8      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001244:	4b59      	ldr	r3, [pc, #356]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a58      	ldr	r2, [pc, #352]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800124e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800125c:	4b53      	ldr	r3, [pc, #332]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a52      	ldr	r2, [pc, #328]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001266:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001268:	4b50      	ldr	r3, [pc, #320]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	494d      	ldr	r1, [pc, #308]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d040      	beq.n	8001308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d115      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e07f      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d109      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e073      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e06b      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f023 0203 	bic.w	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4936      	ldr	r1, [pc, #216]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012d8:	f7ff fa84 	bl	80007e4 <HAL_GetTick>
 80012dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e0:	f7ff fa80 	bl	80007e4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e053      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 020c 	and.w	r2, r3, #12
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	429a      	cmp	r2, r3
 8001306:	d1eb      	bne.n	80012e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d210      	bcs.n	8001338 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0207 	bic.w	r2, r3, #7
 800131e:	4922      	ldr	r1, [pc, #136]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e032      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4916      	ldr	r1, [pc, #88]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	490e      	ldr	r1, [pc, #56]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001376:	f000 f821 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 800137a:	4601      	mov	r1, r0
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
 800138a:	fa21 f303 	lsr.w	r3, r1, r3
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f9e2 	bl	8000760 <HAL_InitTick>

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	08001640 	.word	0x08001640
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013bc:	b490      	push	{r4, r7}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013c4:	1d3c      	adds	r4, r7, #4
 80013c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d002      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0x40>
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d003      	beq.n	8001402 <HAL_RCC_GetSysClockFreq+0x46>
 80013fa:	e02d      	b.n	8001458 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013fe:	623b      	str	r3, [r7, #32]
      break;
 8001400:	e02d      	b.n	800145e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	0c9b      	lsrs	r3, r3, #18
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800140e:	4413      	add	r3, r2
 8001410:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001414:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	0c5b      	lsrs	r3, r3, #17
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800142e:	4413      	add	r3, r2
 8001430:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001434:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_RCC_GetSysClockFreq+0xbc>)
 800143a:	fb02 f203 	mul.w	r2, r2, r3
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	fbb2 f3f3 	udiv	r3, r2, r3
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	e004      	b.n	8001452 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_RCC_GetSysClockFreq+0xc0>)
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	623b      	str	r3, [r7, #32]
      break;
 8001456:	e002      	b.n	800145e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <HAL_RCC_GetSysClockFreq+0xbc>)
 800145a:	623b      	str	r3, [r7, #32]
      break;
 800145c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800145e:	6a3b      	ldr	r3, [r7, #32]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bc90      	pop	{r4, r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	0800162c 	.word	0x0800162c
 8001470:	0800163c 	.word	0x0800163c
 8001474:	40021000 	.word	0x40021000
 8001478:	007a1200 	.word	0x007a1200
 800147c:	003d0900 	.word	0x003d0900

08001480 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <RCC_Delay+0x34>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <RCC_Delay+0x38>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	0a5b      	lsrs	r3, r3, #9
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800149c:	bf00      	nop
  }
  while (Delay --);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	60fa      	str	r2, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f9      	bne.n	800149c <RCC_Delay+0x1c>
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000000 	.word	0x20000000
 80014b8:	10624dd3 	.word	0x10624dd3

080014bc <__errno>:
 80014bc:	4b01      	ldr	r3, [pc, #4]	; (80014c4 <__errno+0x8>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2000000c 	.word	0x2000000c

080014c8 <__libc_init_array>:
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	2500      	movs	r5, #0
 80014cc:	4e0c      	ldr	r6, [pc, #48]	; (8001500 <__libc_init_array+0x38>)
 80014ce:	4c0d      	ldr	r4, [pc, #52]	; (8001504 <__libc_init_array+0x3c>)
 80014d0:	1ba4      	subs	r4, r4, r6
 80014d2:	10a4      	asrs	r4, r4, #2
 80014d4:	42a5      	cmp	r5, r4
 80014d6:	d109      	bne.n	80014ec <__libc_init_array+0x24>
 80014d8:	f000 f896 	bl	8001608 <_init>
 80014dc:	2500      	movs	r5, #0
 80014de:	4e0a      	ldr	r6, [pc, #40]	; (8001508 <__libc_init_array+0x40>)
 80014e0:	4c0a      	ldr	r4, [pc, #40]	; (800150c <__libc_init_array+0x44>)
 80014e2:	1ba4      	subs	r4, r4, r6
 80014e4:	10a4      	asrs	r4, r4, #2
 80014e6:	42a5      	cmp	r5, r4
 80014e8:	d105      	bne.n	80014f6 <__libc_init_array+0x2e>
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014f0:	4798      	blx	r3
 80014f2:	3501      	adds	r5, #1
 80014f4:	e7ee      	b.n	80014d4 <__libc_init_array+0xc>
 80014f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014fa:	4798      	blx	r3
 80014fc:	3501      	adds	r5, #1
 80014fe:	e7f2      	b.n	80014e6 <__libc_init_array+0x1e>
 8001500:	08001650 	.word	0x08001650
 8001504:	08001650 	.word	0x08001650
 8001508:	08001650 	.word	0x08001650
 800150c:	08001654 	.word	0x08001654

08001510 <malloc>:
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <malloc+0xc>)
 8001512:	4601      	mov	r1, r0
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	f000 b80b 	b.w	8001530 <_malloc_r>
 800151a:	bf00      	nop
 800151c:	2000000c 	.word	0x2000000c

08001520 <memset>:
 8001520:	4603      	mov	r3, r0
 8001522:	4402      	add	r2, r0
 8001524:	4293      	cmp	r3, r2
 8001526:	d100      	bne.n	800152a <memset+0xa>
 8001528:	4770      	bx	lr
 800152a:	f803 1b01 	strb.w	r1, [r3], #1
 800152e:	e7f9      	b.n	8001524 <memset+0x4>

08001530 <_malloc_r>:
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	1ccd      	adds	r5, r1, #3
 8001534:	f025 0503 	bic.w	r5, r5, #3
 8001538:	3508      	adds	r5, #8
 800153a:	2d0c      	cmp	r5, #12
 800153c:	bf38      	it	cc
 800153e:	250c      	movcc	r5, #12
 8001540:	2d00      	cmp	r5, #0
 8001542:	4606      	mov	r6, r0
 8001544:	db01      	blt.n	800154a <_malloc_r+0x1a>
 8001546:	42a9      	cmp	r1, r5
 8001548:	d903      	bls.n	8001552 <_malloc_r+0x22>
 800154a:	230c      	movs	r3, #12
 800154c:	6033      	str	r3, [r6, #0]
 800154e:	2000      	movs	r0, #0
 8001550:	bd70      	pop	{r4, r5, r6, pc}
 8001552:	f000 f857 	bl	8001604 <__malloc_lock>
 8001556:	4a21      	ldr	r2, [pc, #132]	; (80015dc <_malloc_r+0xac>)
 8001558:	6814      	ldr	r4, [r2, #0]
 800155a:	4621      	mov	r1, r4
 800155c:	b991      	cbnz	r1, 8001584 <_malloc_r+0x54>
 800155e:	4c20      	ldr	r4, [pc, #128]	; (80015e0 <_malloc_r+0xb0>)
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	b91b      	cbnz	r3, 800156c <_malloc_r+0x3c>
 8001564:	4630      	mov	r0, r6
 8001566:	f000 f83d 	bl	80015e4 <_sbrk_r>
 800156a:	6020      	str	r0, [r4, #0]
 800156c:	4629      	mov	r1, r5
 800156e:	4630      	mov	r0, r6
 8001570:	f000 f838 	bl	80015e4 <_sbrk_r>
 8001574:	1c43      	adds	r3, r0, #1
 8001576:	d124      	bne.n	80015c2 <_malloc_r+0x92>
 8001578:	230c      	movs	r3, #12
 800157a:	4630      	mov	r0, r6
 800157c:	6033      	str	r3, [r6, #0]
 800157e:	f000 f842 	bl	8001606 <__malloc_unlock>
 8001582:	e7e4      	b.n	800154e <_malloc_r+0x1e>
 8001584:	680b      	ldr	r3, [r1, #0]
 8001586:	1b5b      	subs	r3, r3, r5
 8001588:	d418      	bmi.n	80015bc <_malloc_r+0x8c>
 800158a:	2b0b      	cmp	r3, #11
 800158c:	d90f      	bls.n	80015ae <_malloc_r+0x7e>
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	18cc      	adds	r4, r1, r3
 8001592:	50cd      	str	r5, [r1, r3]
 8001594:	4630      	mov	r0, r6
 8001596:	f000 f836 	bl	8001606 <__malloc_unlock>
 800159a:	f104 000b 	add.w	r0, r4, #11
 800159e:	1d23      	adds	r3, r4, #4
 80015a0:	f020 0007 	bic.w	r0, r0, #7
 80015a4:	1ac3      	subs	r3, r0, r3
 80015a6:	d0d3      	beq.n	8001550 <_malloc_r+0x20>
 80015a8:	425a      	negs	r2, r3
 80015aa:	50e2      	str	r2, [r4, r3]
 80015ac:	e7d0      	b.n	8001550 <_malloc_r+0x20>
 80015ae:	684b      	ldr	r3, [r1, #4]
 80015b0:	428c      	cmp	r4, r1
 80015b2:	bf16      	itet	ne
 80015b4:	6063      	strne	r3, [r4, #4]
 80015b6:	6013      	streq	r3, [r2, #0]
 80015b8:	460c      	movne	r4, r1
 80015ba:	e7eb      	b.n	8001594 <_malloc_r+0x64>
 80015bc:	460c      	mov	r4, r1
 80015be:	6849      	ldr	r1, [r1, #4]
 80015c0:	e7cc      	b.n	800155c <_malloc_r+0x2c>
 80015c2:	1cc4      	adds	r4, r0, #3
 80015c4:	f024 0403 	bic.w	r4, r4, #3
 80015c8:	42a0      	cmp	r0, r4
 80015ca:	d005      	beq.n	80015d8 <_malloc_r+0xa8>
 80015cc:	1a21      	subs	r1, r4, r0
 80015ce:	4630      	mov	r0, r6
 80015d0:	f000 f808 	bl	80015e4 <_sbrk_r>
 80015d4:	3001      	adds	r0, #1
 80015d6:	d0cf      	beq.n	8001578 <_malloc_r+0x48>
 80015d8:	6025      	str	r5, [r4, #0]
 80015da:	e7db      	b.n	8001594 <_malloc_r+0x64>
 80015dc:	20000090 	.word	0x20000090
 80015e0:	20000094 	.word	0x20000094

080015e4 <_sbrk_r>:
 80015e4:	b538      	push	{r3, r4, r5, lr}
 80015e6:	2300      	movs	r3, #0
 80015e8:	4c05      	ldr	r4, [pc, #20]	; (8001600 <_sbrk_r+0x1c>)
 80015ea:	4605      	mov	r5, r0
 80015ec:	4608      	mov	r0, r1
 80015ee:	6023      	str	r3, [r4, #0]
 80015f0:	f7fe ff24 	bl	800043c <_sbrk>
 80015f4:	1c43      	adds	r3, r0, #1
 80015f6:	d102      	bne.n	80015fe <_sbrk_r+0x1a>
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	b103      	cbz	r3, 80015fe <_sbrk_r+0x1a>
 80015fc:	602b      	str	r3, [r5, #0]
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
 8001600:	200000a4 	.word	0x200000a4

08001604 <__malloc_lock>:
 8001604:	4770      	bx	lr

08001606 <__malloc_unlock>:
 8001606:	4770      	bx	lr

08001608 <_init>:
 8001608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160a:	bf00      	nop
 800160c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160e:	bc08      	pop	{r3}
 8001610:	469e      	mov	lr, r3
 8001612:	4770      	bx	lr

08001614 <_fini>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr
